<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="semaphore_8hpp" kind="file" language="C++">
    <compoundname>semaphore.hpp</compoundname>
    <includes local="no">memory</includes>
    <includes refid="core_8hpp" local="yes">core.hpp</includes>
    <includes refid="gpu__utils_8hpp" local="yes">gpu_utils.hpp</includes>
    <includes refid="semaphore__device_8hpp" local="yes">semaphore_device.hpp</includes>
    <includedby refid="proxy__channel_8hpp" local="yes">proxy_channel.hpp</includedby>
    <includedby refid="sm__channel_8hpp" local="yes">sm_channel.hpp</includedby>
    <incdepgraph>
      <node id="18">
        <label>device.hpp</label>
        <link refid="device_8hpp"/>
      </node>
      <node id="3">
        <label>core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>linux/version.h</label>
      </node>
      <node id="9">
        <label>cuda_runtime.h</label>
      </node>
      <node id="14">
        <label>stdexcept</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="17">
        <label>semaphore_device.hpp</label>
        <link refid="semaphore__device_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>mscclpp/gpu.hpp</label>
        <link refid="gpu_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>bitset</label>
      </node>
      <node id="6">
        <label>future</label>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="1">
        <label>semaphore.hpp</label>
        <link refid="semaphore_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cuda.h</label>
      </node>
      <node id="12">
        <label>cstring</label>
      </node>
      <node id="11">
        <label>mscclpp/gpu_utils.hpp</label>
        <link refid="gpu__utils_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>semaphore.hpp</label>
        <link refid="semaphore_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>proxy_channel.hpp</label>
        <link refid="proxy__channel_8hpp"/>
      </node>
      <node id="3">
        <label>sm_channel.hpp</label>
        <link refid="sm__channel_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmscclpp_1_1BaseSemaphore" prot="public">mscclpp::BaseSemaphore</innerclass>
    <innerclass refid="classmscclpp_1_1Host2DeviceSemaphore" prot="public">mscclpp::Host2DeviceSemaphore</innerclass>
    <innerclass refid="classmscclpp_1_1Host2HostSemaphore" prot="public">mscclpp::Host2HostSemaphore</innerclass>
    <innerclass refid="classmscclpp_1_1SmDevice2DeviceSemaphore" prot="public">mscclpp::SmDevice2DeviceSemaphore</innerclass>
    <innernamespace refid="namespacemscclpp">mscclpp</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MSCCLPP_SEMAPHORE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSCCLPP_SEMAPHORE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_8hpp" kindref="compound">core.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gpu__utils_8hpp" kindref="compound">gpu_utils.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="semaphore__device_8hpp" kindref="compound">semaphore_device.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemscclpp" kindref="compound">mscclpp</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InboundDeleter,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutboundDeleter&gt;</highlight></codeline>
<codeline lineno="30" refid="classmscclpp_1_1BaseSemaphore" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1BaseSemaphore" kindref="compound">BaseSemaphore</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33" refid="classmscclpp_1_1BaseSemaphore_1a5f3a599ecb971f2613df2b0cb9467a55" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1NonblockingFuture" kindref="compound">NonblockingFuture&lt;RegisteredMemory&gt;</ref><sp/><ref refid="classmscclpp_1_1BaseSemaphore_1a5f3a599ecb971f2613df2b0cb9467a55" kindref="member">remoteInboundSemaphoreIdsRegMem_</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classmscclpp_1_1BaseSemaphore_1aa3f8d454e6f289f7fc004107b3698b90" refkind="member"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;uint64_t,<sp/>InboundDeleter&lt;uint64_t&gt;&gt;<sp/><ref refid="classmscclpp_1_1BaseSemaphore_1aa3f8d454e6f289f7fc004107b3698b90" kindref="member">localInboundSemaphore_</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classmscclpp_1_1BaseSemaphore_1a13cc1511293d69d57f2bae285844129c" refkind="member"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;uint64_t,<sp/>InboundDeleter&lt;uint64_t&gt;&gt;<sp/><ref refid="classmscclpp_1_1BaseSemaphore_1a13cc1511293d69d57f2bae285844129c" kindref="member">expectedInboundSemaphore_</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classmscclpp_1_1BaseSemaphore_1aec4ea46dd287fbc9c619dcc9a2df2886" refkind="member"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;uint64_t,<sp/>OutboundDeleter&lt;uint64_t&gt;&gt;<sp/><ref refid="classmscclpp_1_1BaseSemaphore_1aec4ea46dd287fbc9c619dcc9a2df2886" kindref="member">outboundSemaphore_</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58" refid="classmscclpp_1_1BaseSemaphore_1a1f438a138ad58311a3a97966f647b5c2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1BaseSemaphore_1a1f438a138ad58311a3a97966f647b5c2" kindref="member">BaseSemaphore</ref>(std::unique_ptr&lt;uint64_t,<sp/>InboundDeleter&lt;uint64_t&gt;&gt;<sp/>localInboundSemaphoreId,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;uint64_t,<sp/>InboundDeleter&lt;uint64_t&gt;&gt;<sp/>expectedInboundSemaphoreId,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;uint64_t,<sp/>OutboundDeleter&lt;uint64_t&gt;&gt;<sp/>outboundSemaphoreId)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classmscclpp_1_1BaseSemaphore_1aa3f8d454e6f289f7fc004107b3698b90" kindref="member">localInboundSemaphore_</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(localInboundSemaphoreId)),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmscclpp_1_1BaseSemaphore_1a13cc1511293d69d57f2bae285844129c" kindref="member">expectedInboundSemaphore_</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(expectedInboundSemaphoreId)),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmscclpp_1_1BaseSemaphore_1aec4ea46dd287fbc9c619dcc9a2df2886" kindref="member">outboundSemaphore_</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(outboundSemaphoreId))<sp/>{}</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classmscclpp_1_1Host2DeviceSemaphore" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Host2DeviceSemaphore" kindref="compound">Host2DeviceSemaphore</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1BaseSemaphore" kindref="compound">BaseSemaphore</ref>&lt;CudaDeleter,<sp/>std::default_delete&gt;<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Connection&gt;<sp/>connection_;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Host2DeviceSemaphore_1a73d129c6dae97b2a8b2cdf02edb85156" kindref="member">Host2DeviceSemaphore</ref>(<ref refid="classmscclpp_1_1Communicator" kindref="compound">Communicator</ref>&amp;<sp/>communicator,<sp/>std::shared_ptr&lt;Connection&gt;<sp/><ref refid="classmscclpp_1_1Host2DeviceSemaphore_1aa23450892f42bddfd40676d211c0385f" kindref="member">connection</ref>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Connection&gt;<sp/><ref refid="classmscclpp_1_1Host2DeviceSemaphore_1aa23450892f42bddfd40676d211c0385f" kindref="member">connection</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Host2DeviceSemaphore_1aadcbfaeab2c331f0df600ec3dbdb6134" kindref="member">signal</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="classmscclpp_1_1Host2DeviceSemaphore_1af3ffce164a9024c8e7cf881dafdbb0f3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1Host2DeviceSemaphoreDeviceHandle" kindref="compound">DeviceHandle</ref><sp/>=<sp/><ref refid="structmscclpp_1_1Host2DeviceSemaphoreDeviceHandle" kindref="compound">Host2DeviceSemaphoreDeviceHandle</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="structmscclpp_1_1Host2DeviceSemaphoreDeviceHandle" kindref="compound">DeviceHandle</ref><sp/><ref refid="classmscclpp_1_1Host2DeviceSemaphore_1a6f984a90dd6765dc9e6fe6df3af19e49" kindref="member">deviceHandle</ref>();</highlight></codeline>
<codeline lineno="89"><highlight class="normal">};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classmscclpp_1_1Host2HostSemaphore" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Host2HostSemaphore" kindref="compound">Host2HostSemaphore</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1BaseSemaphore" kindref="compound">BaseSemaphore</ref>&lt;std::default_delete,<sp/>std::default_delete&gt;<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Host2HostSemaphore_1abeaaf1af313fc3e9d9ab6447538918bd" kindref="member">Host2HostSemaphore</ref>(<ref refid="classmscclpp_1_1Communicator" kindref="compound">Communicator</ref>&amp;<sp/>communicator,<sp/>std::shared_ptr&lt;Connection&gt;<sp/><ref refid="classmscclpp_1_1Host2HostSemaphore_1a0a908a5f08d49f59f2f2f9d2e3ba3798" kindref="member">connection</ref>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Connection&gt;<sp/><ref refid="classmscclpp_1_1Host2HostSemaphore_1a0a908a5f08d49f59f2f2f9d2e3ba3798" kindref="member">connection</ref>();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Host2HostSemaphore_1a620ff6ee7990f256610bcc42ef06f017" kindref="member">signal</ref>();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Host2HostSemaphore_1ae089f5f8fca1603c9ec3b9a2a4145e1a" kindref="member">poll</ref>();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Host2HostSemaphore_1a276ad1c97f216d626349e93029f28f72" kindref="member">wait</ref>(int64_t<sp/>maxSpinCount<sp/>=<sp/>10000000);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Connection&gt;<sp/>connection_;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classmscclpp_1_1SmDevice2DeviceSemaphore" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1SmDevice2DeviceSemaphore" kindref="compound">SmDevice2DeviceSemaphore</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1BaseSemaphore" kindref="compound">BaseSemaphore</ref>&lt;CudaDeleter,<sp/>CudaDeleter&gt;<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1SmDevice2DeviceSemaphore_1ab238869f02562031eeaea62d78b07ebd" kindref="member">SmDevice2DeviceSemaphore</ref>(<ref refid="classmscclpp_1_1Communicator" kindref="compound">Communicator</ref>&amp;<sp/>communicator,<sp/>std::shared_ptr&lt;Connection&gt;<sp/>connection);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1SmDevice2DeviceSemaphore_1ab238869f02562031eeaea62d78b07ebd" kindref="member">SmDevice2DeviceSemaphore</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="classmscclpp_1_1SmDevice2DeviceSemaphore_1a1ed9818ce26e8281d3cdb003a61ef248" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1SmDevice2DeviceSemaphoreDeviceHandle" kindref="compound">DeviceHandle</ref><sp/>=<sp/><ref refid="structmscclpp_1_1SmDevice2DeviceSemaphoreDeviceHandle" kindref="compound">SmDevice2DeviceSemaphoreDeviceHandle</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="structmscclpp_1_1SmDevice2DeviceSemaphoreDeviceHandle" kindref="compound">DeviceHandle</ref><sp/><ref refid="classmscclpp_1_1SmDevice2DeviceSemaphore_1ae6cece1f7f231e473d74c24dcb6f1217" kindref="member">deviceHandle</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="classmscclpp_1_1SmDevice2DeviceSemaphore_1a38f5c3a55699515d16e9f96cbadb89f8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1SmDevice2DeviceSemaphore_1a38f5c3a55699515d16e9f96cbadb89f8" kindref="member">isRemoteInboundSemaphoreIdSet_</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mscclpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>MSCCLPP_SEMAPHORE_HPP_</highlight></codeline>
    </programlisting>
    <location file="/root/mscclpp/include/mscclpp/semaphore.hpp"/>
  </compounddef>
</doxygen>
