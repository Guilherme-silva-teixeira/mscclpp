<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmscclpp_1_1BaseError" kind="class" language="C++" prot="public">
    <compoundname>mscclpp::BaseError</compoundname>
    <basecompoundref prot="public" virt="non-virtual">runtime_error</basecompoundref>
    <derivedcompoundref refid="classmscclpp_1_1CudaError" prot="public" virt="non-virtual">mscclpp::CudaError</derivedcompoundref>
    <derivedcompoundref refid="classmscclpp_1_1CuError" prot="public" virt="non-virtual">mscclpp::CuError</derivedcompoundref>
    <derivedcompoundref refid="classmscclpp_1_1Error" prot="public" virt="non-virtual">mscclpp::Error</derivedcompoundref>
    <derivedcompoundref refid="classmscclpp_1_1IbError" prot="public" virt="non-virtual">mscclpp::IbError</derivedcompoundref>
    <derivedcompoundref refid="classmscclpp_1_1SysError" prot="public" virt="non-virtual">mscclpp::SysError</derivedcompoundref>
    <includes refid="errors_8hpp" local="no">errors.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmscclpp_1_1BaseError_1a7ffe97152f9083131bfd7d3eb27c4751" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string mscclpp::BaseError::message_</definition>
        <argsstring></argsstring>
        <name>message_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/errors.hpp" line="56" column="15" bodyfile="/root/mscclpp/include/mscclpp/errors.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmscclpp_1_1BaseError_1a10e56452844c8f3b59ffdd5dd25bf805" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int mscclpp::BaseError::errorCode_</definition>
        <argsstring></argsstring>
        <name>errorCode_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/errors.hpp" line="57" column="7" bodyfile="/root/mscclpp/include/mscclpp/errors.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmscclpp_1_1BaseError_1aea99c987306c47a44a8720b1bddf8901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mscclpp::BaseError::BaseError</definition>
        <argsstring>(const std::string &amp;message, int errorCode)</argsstring>
        <name>BaseError</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>errorCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor for <ref refid="classmscclpp_1_1BaseError" kindref="compound">BaseError</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The error message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errorCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/errors.hpp" line="35" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classmscclpp_1_1BaseError_1a1be995088a556e5627ba5a06d3b698d8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>mscclpp::BaseError::BaseError</definition>
        <argsstring>(int errorCode)</argsstring>
        <name>BaseError</name>
        <param>
          <type>int</type>
          <declname>errorCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor for <ref refid="classmscclpp_1_1BaseError" kindref="compound">BaseError</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errorCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/errors.hpp" line="40" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classmscclpp_1_1BaseError_1a3e83519aadf3747f6325b6fc2abf53ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual mscclpp::BaseError::~BaseError</definition>
        <argsstring>()=default</argsstring>
        <name>~BaseError</name>
        <briefdescription>
<para>Virtual destructor for <ref refid="classmscclpp_1_1BaseError" kindref="compound">BaseError</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/errors.hpp" line="43" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classmscclpp_1_1BaseError_1af17f47caed93cb0b5f73994d6a636258" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mscclpp::BaseError::getErrorCode</definition>
        <argsstring>() const</argsstring>
        <name>getErrorCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the error code.</para>
<para><simplesect kind="return"><para>The error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/errors.hpp" line="48" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classmscclpp_1_1BaseError_1ac3b7c44b7d625195e19e97e4407b7f65" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* mscclpp::BaseError::what</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>what</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the error message.</para>
<para><simplesect kind="return"><para>The error message. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/errors.hpp" line="53" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for all errors thrown by MSCCL++. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>mscclpp::CudaError</label>
        <link refid="classmscclpp_1_1CudaError"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::runtime_error</label>
      </node>
      <node id="7">
        <label>mscclpp::SysError</label>
        <link refid="classmscclpp_1_1SysError"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>mscclpp::Error</label>
        <link refid="classmscclpp_1_1Error"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>mscclpp::IbError</label>
        <link refid="classmscclpp_1_1IbError"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>mscclpp::BaseError</label>
        <link refid="classmscclpp_1_1BaseError"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>mscclpp::CuError</label>
        <link refid="classmscclpp_1_1CuError"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>std::runtime_error</label>
      </node>
      <node id="1">
        <label>mscclpp::BaseError</label>
        <link refid="classmscclpp_1_1BaseError"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/root/mscclpp/include/mscclpp/errors.hpp" line="29" column="42" bodyfile="/root/mscclpp/include/mscclpp/errors.hpp" bodystart="29" bodyend="58"/>
    <listofallmembers>
      <member refid="classmscclpp_1_1BaseError_1aea99c987306c47a44a8720b1bddf8901" prot="public" virt="non-virtual"><scope>mscclpp::BaseError</scope><name>BaseError</name></member>
      <member refid="classmscclpp_1_1BaseError_1a1be995088a556e5627ba5a06d3b698d8" prot="public" virt="non-virtual"><scope>mscclpp::BaseError</scope><name>BaseError</name></member>
      <member refid="classmscclpp_1_1BaseError_1a10e56452844c8f3b59ffdd5dd25bf805" prot="protected" virt="non-virtual"><scope>mscclpp::BaseError</scope><name>errorCode_</name></member>
      <member refid="classmscclpp_1_1BaseError_1af17f47caed93cb0b5f73994d6a636258" prot="public" virt="non-virtual"><scope>mscclpp::BaseError</scope><name>getErrorCode</name></member>
      <member refid="classmscclpp_1_1BaseError_1a7ffe97152f9083131bfd7d3eb27c4751" prot="protected" virt="non-virtual"><scope>mscclpp::BaseError</scope><name>message_</name></member>
      <member refid="classmscclpp_1_1BaseError_1ac3b7c44b7d625195e19e97e4407b7f65" prot="public" virt="non-virtual"><scope>mscclpp::BaseError</scope><name>what</name></member>
      <member refid="classmscclpp_1_1BaseError_1a3e83519aadf3747f6325b6fc2abf53ea" prot="public" virt="virtual"><scope>mscclpp::BaseError</scope><name>~BaseError</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
