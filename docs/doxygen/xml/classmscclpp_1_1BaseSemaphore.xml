<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmscclpp_1_1BaseSemaphore" kind="class" language="C++" prot="public">
    <compoundname>mscclpp::BaseSemaphore</compoundname>
    <includes refid="semaphore_8hpp" local="no">semaphore.hpp</includes>
    <templateparamlist>
      <param>
        <type>template&lt; typename &gt; typename</type>
        <declname>InboundDeleter</declname>
        <defname>InboundDeleter</defname>
      </param>
      <param>
        <type>template&lt; typename &gt; typename</type>
        <declname>OutboundDeleter</declname>
        <defname>OutboundDeleter</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmscclpp_1_1BaseSemaphore_1a5f3a599ecb971f2613df2b0cb9467a55" prot="protected" static="no" mutable="no">
        <type><ref refid="classmscclpp_1_1NonblockingFuture" kindref="compound">NonblockingFuture</ref>&lt; <ref refid="classmscclpp_1_1RegisteredMemory" kindref="compound">RegisteredMemory</ref> &gt;</type>
        <definition>NonblockingFuture&lt;RegisteredMemory&gt; mscclpp::BaseSemaphore&lt; InboundDeleter, OutboundDeleter &gt;::remoteInboundSemaphoreIdsRegMem_</definition>
        <argsstring></argsstring>
        <name>remoteInboundSemaphoreIdsRegMem_</name>
        <briefdescription>
<para>The registered memory for the remote peer&apos;s inbound semaphore ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="33" column="21" bodyfile="/root/mscclpp/include/mscclpp/semaphore.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmscclpp_1_1BaseSemaphore_1aa3f8d454e6f289f7fc004107b3698b90" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; uint64_t, InboundDeleter&lt; uint64_t &gt; &gt;</type>
        <definition>std::unique_ptr&lt;uint64_t, InboundDeleter&lt;uint64_t&gt; &gt; mscclpp::BaseSemaphore&lt; InboundDeleter, OutboundDeleter &gt;::localInboundSemaphore_</definition>
        <argsstring></argsstring>
        <name>localInboundSemaphore_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The inbound semaphore ID that is incremented by the remote peer and waited on by the local peer.</para>
<para>The location of <ref refid="classmscclpp_1_1BaseSemaphore_1aa3f8d454e6f289f7fc004107b3698b90" kindref="member">localInboundSemaphore_</ref> can be either on the host or on the device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="38" column="19" bodyfile="/root/mscclpp/include/mscclpp/semaphore.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmscclpp_1_1BaseSemaphore_1a13cc1511293d69d57f2bae285844129c" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; uint64_t, InboundDeleter&lt; uint64_t &gt; &gt;</type>
        <definition>std::unique_ptr&lt;uint64_t, InboundDeleter&lt;uint64_t&gt; &gt; mscclpp::BaseSemaphore&lt; InboundDeleter, OutboundDeleter &gt;::expectedInboundSemaphore_</definition>
        <argsstring></argsstring>
        <name>expectedInboundSemaphore_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The expected inbound semaphore ID to be incremented by the local peer and compared to the <ref refid="classmscclpp_1_1BaseSemaphore_1aa3f8d454e6f289f7fc004107b3698b90" kindref="member">localInboundSemaphore_</ref>.</para>
<para>The location of <ref refid="classmscclpp_1_1BaseSemaphore_1a13cc1511293d69d57f2bae285844129c" kindref="member">expectedInboundSemaphore_</ref> can be either on the host or on the device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="44" column="19" bodyfile="/root/mscclpp/include/mscclpp/semaphore.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmscclpp_1_1BaseSemaphore_1aec4ea46dd287fbc9c619dcc9a2df2886" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; uint64_t, OutboundDeleter&lt; uint64_t &gt; &gt;</type>
        <definition>std::unique_ptr&lt;uint64_t, OutboundDeleter&lt;uint64_t&gt; &gt; mscclpp::BaseSemaphore&lt; InboundDeleter, OutboundDeleter &gt;::outboundSemaphore_</definition>
        <argsstring></argsstring>
        <name>outboundSemaphore_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The outbound semaphore ID that is incremented by the local peer and copied to the remote peer&apos;s <ref refid="classmscclpp_1_1BaseSemaphore_1aa3f8d454e6f289f7fc004107b3698b90" kindref="member">localInboundSemaphore_</ref>.</para>
<para>The location of <ref refid="classmscclpp_1_1BaseSemaphore_1aec4ea46dd287fbc9c619dcc9a2df2886" kindref="member">outboundSemaphore_</ref> can be either on the host or on the device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="50" column="19" bodyfile="/root/mscclpp/include/mscclpp/semaphore.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmscclpp_1_1BaseSemaphore_1a1f438a138ad58311a3a97966f647b5c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mscclpp::BaseSemaphore&lt; InboundDeleter, OutboundDeleter &gt;::BaseSemaphore</definition>
        <argsstring>(std::unique_ptr&lt; uint64_t, InboundDeleter&lt; uint64_t &gt;&gt; localInboundSemaphoreId, std::unique_ptr&lt; uint64_t, InboundDeleter&lt; uint64_t &gt;&gt; expectedInboundSemaphoreId, std::unique_ptr&lt; uint64_t, OutboundDeleter&lt; uint64_t &gt;&gt; outboundSemaphoreId)</argsstring>
        <name>BaseSemaphore</name>
        <param>
          <type>std::unique_ptr&lt; uint64_t, InboundDeleter&lt; uint64_t &gt;&gt;</type>
          <declname>localInboundSemaphoreId</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; uint64_t, InboundDeleter&lt; uint64_t &gt;&gt;</type>
          <declname>expectedInboundSemaphoreId</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; uint64_t, OutboundDeleter&lt; uint64_t &gt;&gt;</type>
          <declname>outboundSemaphoreId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a <ref refid="classmscclpp_1_1BaseSemaphore" kindref="compound">BaseSemaphore</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>localInboundSemaphoreId</parametername>
</parameternamelist>
<parameterdescription>
<para>The inbound semaphore ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expectedInboundSemaphoreId</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected inbound semaphore ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outboundSemaphoreId</parametername>
</parameternamelist>
<parameterdescription>
<para>The outbound semaphore ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="58" column="3" bodyfile="/root/mscclpp/include/mscclpp/semaphore.hpp" bodystart="58" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A base class for semaphores.</para>
<para>An semaphore is a synchronization mechanism that allows the local peer to wait for the remote peer to complete a data transfer. The local peer signals the remote peer that it has completed a data transfer by incrementing the outbound semaphore ID. The incremented outbound semaphore ID is copied to the remote peer&apos;s inbound semaphore ID so that the remote peer can wait for the local peer to complete a data transfer. Vice versa, the remote peer signals the local peer that it has completed a data transfer by incrementing the remote peer&apos;s outbound semaphore ID and copying the incremented value to the local peer&apos;s inbound semaphore ID.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InboundDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The deleter for inbound semaphore IDs. This is either <computeroutput>std::default_delete</computeroutput> for host memory or <ref refid="structmscclpp_1_1CudaDeleter" kindref="compound">CudaDeleter</ref> for device memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutboundDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The deleter for outbound semaphore IDs. This is either <computeroutput>std::default_delete</computeroutput> for host memory or <ref refid="structmscclpp_1_1CudaDeleter" kindref="compound">CudaDeleter</ref> for device memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>mscclpp::NonblockingFuture&lt; mscclpp::RegisteredMemory &gt;</label>
        <link refid="classmscclpp_1_1NonblockingFuture"/>
      </node>
      <node id="1">
        <label>mscclpp::BaseSemaphore&lt; InboundDeleter, OutboundDeleter &gt;</label>
        <link refid="classmscclpp_1_1BaseSemaphore"/>
        <childnode refid="2" relation="usage">
          <edgelabel>remoteInboundSemaphoreIdsRegMem_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="30" column="20" bodyfile="/root/mscclpp/include/mscclpp/semaphore.hpp" bodystart="30" bodyend="64"/>
    <listofallmembers>
      <member refid="classmscclpp_1_1BaseSemaphore_1a1f438a138ad58311a3a97966f647b5c2" prot="public" virt="non-virtual"><scope>mscclpp::BaseSemaphore</scope><name>BaseSemaphore</name></member>
      <member refid="classmscclpp_1_1BaseSemaphore_1a13cc1511293d69d57f2bae285844129c" prot="protected" virt="non-virtual"><scope>mscclpp::BaseSemaphore</scope><name>expectedInboundSemaphore_</name></member>
      <member refid="classmscclpp_1_1BaseSemaphore_1aa3f8d454e6f289f7fc004107b3698b90" prot="protected" virt="non-virtual"><scope>mscclpp::BaseSemaphore</scope><name>localInboundSemaphore_</name></member>
      <member refid="classmscclpp_1_1BaseSemaphore_1aec4ea46dd287fbc9c619dcc9a2df2886" prot="protected" virt="non-virtual"><scope>mscclpp::BaseSemaphore</scope><name>outboundSemaphore_</name></member>
      <member refid="classmscclpp_1_1BaseSemaphore_1a5f3a599ecb971f2613df2b0cb9467a55" prot="protected" virt="non-virtual"><scope>mscclpp::BaseSemaphore</scope><name>remoteInboundSemaphoreIdsRegMem_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
