<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="packet__device_8hpp" kind="file" language="C++">
    <compoundname>packet_device.hpp</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">type_traits</includes>
    <includes refid="device_8hpp" local="yes">device.hpp</includes>
    <incdepgraph>
      <node id="4">
        <label>device.hpp</label>
        <link refid="device_8hpp"/>
      </node>
      <node id="2">
        <label>cstdint</label>
      </node>
      <node id="1">
        <label>packet_device.hpp</label>
        <link refid="packet__device_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <innerclass refid="unionmscclpp_1_1LL16Packet" prot="public">mscclpp::LL16Packet</innerclass>
    <innerclass refid="unionmscclpp_1_1LL8Packet" prot="public">mscclpp::LL8Packet</innerclass>
    <innernamespace refid="namespacemscclpp">mscclpp</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MSCCLPP_PACKET_DEVICE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSCCLPP_PACKET_DEVICE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="device_8hpp" kindref="compound">device.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MSCCLPP_DEVICE_COMPILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="atomic__device_8hpp" kindref="compound">atomic_device.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="poll__device_8hpp" kindref="compound">poll_device.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(MSCCLPP_DEVICE_COMPILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemscclpp" kindref="compound">mscclpp</ref><sp/>{</highlight></codeline>
<codeline lineno="19" refid="unionmscclpp_1_1LL16Packet" refkind="compound"><highlight class="keyword">union<sp/></highlight><highlight class="keyword">alignas</highlight><highlight class="normal">(16)<sp/><ref refid="unionmscclpp_1_1LL16Packet" kindref="compound">LL16Packet</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>data<sp/>is<sp/>written<sp/>with<sp/>an<sp/>atomicity<sp/>of<sp/>8<sp/>bytes<sp/>(IB/RDMA).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="22" refid="unionmscclpp_1_1LL16Packet_1a8fe40ee4780cc4d3c4b6fab7da5619ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="unionmscclpp_1_1LL16Packet_1a8fe40ee4780cc4d3c4b6fab7da5619ef" kindref="member">data1</ref>;</highlight></codeline>
<codeline lineno="23" refid="unionmscclpp_1_1LL16Packet_1af699354b2885f59182ebe2e10e217acc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="unionmscclpp_1_1LL16Packet_1af699354b2885f59182ebe2e10e217acc" kindref="member">flag1</ref>;</highlight></codeline>
<codeline lineno="24" refid="unionmscclpp_1_1LL16Packet_1a822e4c583e14cab3bc7eab374ab321ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="unionmscclpp_1_1LL16Packet_1a822e4c583e14cab3bc7eab374ab321ea" kindref="member">data2</ref>;</highlight></codeline>
<codeline lineno="25" refid="unionmscclpp_1_1LL16Packet_1ac9b64bf1e730b1bb0092f9373e342289" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="unionmscclpp_1_1LL16Packet_1ac9b64bf1e730b1bb0092f9373e342289" kindref="member">flag2</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="27" refid="unionmscclpp_1_1LL16Packet_1a76d4e11d20cfb941d1cd5e42d204c086" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="unionmscclpp_1_1LL16Packet_1a76d4e11d20cfb941d1cd5e42d204c086" kindref="member">Payload</ref><sp/>=<sp/>uint2;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MSCCLPP_DEVICE_COMPILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>ulonglong2<sp/>raw_;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/><ref refid="unionmscclpp_1_1LL16Packet" kindref="compound">LL16Packet</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/><ref refid="unionmscclpp_1_1LL16Packet" kindref="compound">LL16Packet</ref>(uint2<sp/>val,<sp/>uint32_t<sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionmscclpp_1_1LL16Packet_1a8fe40ee4780cc4d3c4b6fab7da5619ef" kindref="member">data1</ref><sp/>=<sp/>val.x;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionmscclpp_1_1LL16Packet_1af699354b2885f59182ebe2e10e217acc" kindref="member">flag1</ref><sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionmscclpp_1_1LL16Packet_1a822e4c583e14cab3bc7eab374ab321ea" kindref="member">data2</ref><sp/>=<sp/>val.y;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionmscclpp_1_1LL16Packet_1ac9b64bf1e730b1bb0092f9373e342289" kindref="member">flag2</ref><sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(uint32_t<sp/>val1,<sp/>uint32_t<sp/>val2,<sp/>uint32_t<sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;st.volatile.global.v4.u32<sp/>[%0],<sp/>{%1,%2,%3,%4};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(&amp;raw_),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(flag),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val2),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(flag));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>!defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>uint4<sp/>reg<sp/>=<sp/>make_uint4(val1,<sp/>flag,<sp/>val2,<sp/>flag);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>ulonglong2*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">ulonglong2*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;reg);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>atomicStore(&amp;(raw_.x),<sp/>p-&gt;x,<sp/>memoryOrderRelaxed);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>atomicStore(&amp;(raw_.y),<sp/>p-&gt;y,<sp/>memoryOrderRelaxed);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(uint64_t<sp/>val,<sp/>uint32_t<sp/>flag)<sp/>{<sp/>write((uint32_t)val,<sp/>(uint32_t)(val<sp/>&gt;&gt;<sp/>32),<sp/>flag);<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(uint2<sp/>val,<sp/>uint32_t<sp/>flag)<sp/>{<sp/>write(val.x,<sp/>val.y,<sp/>flag);<sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readOnce(uint32_t<sp/>flag,<sp/>uint2&amp;<sp/>data)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="unionmscclpp_1_1LL16Packet_1af699354b2885f59182ebe2e10e217acc" kindref="member">flag1</ref>,<sp/><ref refid="unionmscclpp_1_1LL16Packet_1ac9b64bf1e730b1bb0092f9373e342289" kindref="member">flag2</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ld.volatile.global.v4.u32<sp/>{%0,%1,%2,%3},<sp/>[%4];&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(data.x),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(<ref refid="unionmscclpp_1_1LL16Packet_1af699354b2885f59182ebe2e10e217acc" kindref="member">flag1</ref>),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(data.y),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(<ref refid="unionmscclpp_1_1LL16Packet_1ac9b64bf1e730b1bb0092f9373e342289" kindref="member">flag2</ref>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(&amp;raw_));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="unionmscclpp_1_1LL16Packet_1af699354b2885f59182ebe2e10e217acc" kindref="member">flag1</ref><sp/>!=<sp/>flag)<sp/>||<sp/>(<ref refid="unionmscclpp_1_1LL16Packet_1ac9b64bf1e730b1bb0092f9373e342289" kindref="member">flag2</ref><sp/>!=<sp/>flag);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>!defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>ulonglong2<sp/>reg;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>reg.x<sp/>=<sp/>atomicLoad(&amp;(raw_.x),<sp/>memoryOrderRelaxed);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>reg.y<sp/>=<sp/>atomicLoad(&amp;(raw_.y),<sp/>memoryOrderRelaxed);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>uint4*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint4*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;reg);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>data.x<sp/>=<sp/>ptr-&gt;x;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>data.y<sp/>=<sp/>ptr-&gt;z;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ptr-&gt;y<sp/>!=<sp/>flag)<sp/>||<sp/>(ptr-&gt;w<sp/>!=<sp/>flag);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/>uint2<sp/>read(uint32_t<sp/>flag,<sp/>int64_t<sp/>maxSpinCount<sp/>=<sp/>100000000)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>uint2<sp/>data;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>POLL_MAYBE_JAILBREAK(readOnce(flag,<sp/>data),<sp/>maxSpinCount);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()<sp/>{<sp/>raw_<sp/>=<sp/>make_ulonglong2(0,<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(MSCCLPP_DEVICE_COMPILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="unionmscclpp_1_1LL8Packet" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="keyword">alignas</highlight><highlight class="normal">(8)<sp/><ref refid="unionmscclpp_1_1LL8Packet" kindref="compound">LL8Packet</ref><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>data<sp/>is<sp/>written<sp/>with<sp/>an<sp/>atomicity<sp/>of<sp/>8<sp/>bytes<sp/>(IB/RDMA).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="107" refid="unionmscclpp_1_1LL8Packet_1a4fe87a7dcf95cdd598e83a21f3cd90ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="unionmscclpp_1_1LL8Packet_1a4fe87a7dcf95cdd598e83a21f3cd90ab" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="108" refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" kindref="member">flag</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="110" refid="unionmscclpp_1_1LL8Packet_1ad37fe974f93f35964dabe23acc4fb811" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="unionmscclpp_1_1LL8Packet_1ad37fe974f93f35964dabe23acc4fb811" kindref="member">raw_</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="unionmscclpp_1_1LL8Packet_1a263c0f189389599ce469c90181579e29" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="unionmscclpp_1_1LL8Packet_1a263c0f189389599ce469c90181579e29" kindref="member">Payload</ref><sp/>=<sp/>uint32_t;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MSCCLPP_DEVICE_COMPILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/><ref refid="unionmscclpp_1_1LL8Packet" kindref="compound">LL8Packet</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/><ref refid="unionmscclpp_1_1LL8Packet" kindref="compound">LL8Packet</ref>(uint32_t<sp/>val,<sp/>uint32_t<sp/><ref refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" kindref="member">flag</ref>)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;data<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;flag<sp/>=<sp/><ref refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" kindref="member">flag</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(uint32_t<sp/>val,<sp/>uint32_t<sp/><ref refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" kindref="member">flag</ref>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;st.volatile.global.v2.u32<sp/>[%0],<sp/>{%1,%2};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(&amp;<ref refid="unionmscclpp_1_1LL8Packet_1ad37fe974f93f35964dabe23acc4fb811" kindref="member">raw_</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(<ref refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" kindref="member">flag</ref>));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>!defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>uint2<sp/>reg<sp/>=<sp/>make_uint2(val,<sp/><ref refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" kindref="member">flag</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint64_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;reg);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>atomicStore(&amp;(<ref refid="unionmscclpp_1_1LL8Packet_1ad37fe974f93f35964dabe23acc4fb811" kindref="member">raw_</ref>),<sp/>*p,<sp/>memoryOrderRelaxed);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readOnce(uint32_t<sp/><ref refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" kindref="member">flag</ref>,<sp/>uint32_t&amp;<sp/><ref refid="unionmscclpp_1_1LL8Packet_1a4fe87a7dcf95cdd598e83a21f3cd90ab" kindref="member">data</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>f;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ld.volatile.global.v2.u32<sp/>{%0,%1},<sp/>[%2];&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(<ref refid="unionmscclpp_1_1LL8Packet_1a4fe87a7dcf95cdd598e83a21f3cd90ab" kindref="member">data</ref>),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(f)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(&amp;<ref refid="unionmscclpp_1_1LL8Packet_1ad37fe974f93f35964dabe23acc4fb811" kindref="member">raw_</ref>));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(f<sp/>!=<sp/><ref refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" kindref="member">flag</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>!defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>reg;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>reg<sp/>=<sp/>atomicLoad(&amp;(<ref refid="unionmscclpp_1_1LL8Packet_1ad37fe974f93f35964dabe23acc4fb811" kindref="member">raw_</ref>),<sp/>memoryOrderRelaxed);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>uint2*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint2*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;reg);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionmscclpp_1_1LL8Packet_1a4fe87a7dcf95cdd598e83a21f3cd90ab" kindref="member">data</ref><sp/>=<sp/>ptr-&gt;x;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ptr-&gt;y<sp/>!=<sp/><ref refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" kindref="member">flag</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/>uint32_t<sp/>read(uint32_t<sp/><ref refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" kindref="member">flag</ref>,<sp/>int64_t<sp/>maxSpinCount<sp/>=<sp/>1000000)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="unionmscclpp_1_1LL8Packet_1a4fe87a7dcf95cdd598e83a21f3cd90ab" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>POLL_MAYBE_JAILBREAK(readOnce(<ref refid="unionmscclpp_1_1LL8Packet_1ad8bff06eb599755b47fb9d3176ad7a70" kindref="member">flag</ref>,<sp/><ref refid="unionmscclpp_1_1LL8Packet_1a4fe87a7dcf95cdd598e83a21f3cd90ab" kindref="member">data</ref>),<sp/>maxSpinCount);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="unionmscclpp_1_1LL8Packet_1a4fe87a7dcf95cdd598e83a21f3cd90ab" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()<sp/>{<sp/><ref refid="unionmscclpp_1_1LL8Packet_1ad37fe974f93f35964dabe23acc4fb811" kindref="member">raw_</ref><sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(MSCCLPP_DEVICE_COMPILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="namespacemscclpp_1a4c273e632c842bb3f17b60c7ab59a79a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="unionmscclpp_1_1LL16Packet" kindref="compound">LLPacket</ref><sp/>=<sp/><ref refid="unionmscclpp_1_1LL16Packet" kindref="compound">LL16Packet</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MSCCLPP_DEVICE_COMPILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>putLL16Packets(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>targetPtr,<sp/>uint64_t<sp/>targetOffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>originPtr,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>originOffset,<sp/>uint64_t<sp/>originBytes,<sp/>uint32_t<sp/>threadId,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numThreads,<sp/>uint32_t<sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>should<sp/>be<sp/>aligned<sp/>to<sp/>8<sp/>bytes<sp/>&amp;<sp/>size<sp/>should<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>8<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*<sp/>originBase<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)originPtr<sp/>+<sp/>originOffset);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="unionmscclpp_1_1LL16Packet" kindref="compound">LL16Packet</ref>*<sp/>targetBase<sp/>=<sp/>(<ref refid="unionmscclpp_1_1LL16Packet" kindref="compound">LL16Packet</ref>*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)targetPtr<sp/>+<sp/>targetOffset);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nElem<sp/>=<sp/>originBytes<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>threadId;<sp/>i<sp/>&lt;<sp/>nElem;<sp/>i<sp/>+=<sp/>numThreads)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionmscclpp_1_1LL16Packet" kindref="compound">LL16Packet</ref>*<sp/>pkt<sp/>=<sp/>&amp;targetBase[i];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>pkt-&gt;write(originBase[2<sp/>*<sp/>i],<sp/>originBase[2<sp/>*<sp/>i<sp/>+<sp/>1],<sp/>flag);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getLL16Packets(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>targetPtr,<sp/>uint64_t<sp/>targetOffset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>originPtr,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>originOffset,<sp/>uint64_t<sp/>originBytes,<sp/>uint32_t<sp/>threadId,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numThreads,<sp/>uint32_t<sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>should<sp/>be<sp/>aligned<sp/>to<sp/>8<sp/>bytes<sp/>&amp;<sp/>size<sp/>should<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>8<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LL16Packet*<sp/>targetBase<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LL16Packet*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)targetPtr<sp/>+<sp/>targetOffset);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>uint2*<sp/>originBase<sp/>=<sp/>(uint2*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)originPtr<sp/>+<sp/>originOffset);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nElem<sp/>=<sp/>originBytes<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint2);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>threadId;<sp/>i<sp/>&lt;<sp/>nElem;<sp/>i<sp/>+=<sp/>numThreads)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LL16Packet*<sp/>pkt<sp/>=<sp/>&amp;targetBase[i];</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>originBase[i]<sp/>=<sp/>pkt-&gt;read(flag);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>putLL8Packets(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>targetPtr,<sp/>uint64_t<sp/>targetOffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>originPtr,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>originOffset,<sp/>uint64_t<sp/>originBytes,<sp/>uint32_t<sp/>threadId,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numThreads,<sp/>uint32_t<sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>should<sp/>be<sp/>aligned<sp/>to<sp/>4<sp/>bytes<sp/>&amp;<sp/>size<sp/>should<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>4<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*<sp/>originBase<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)originPtr<sp/>+<sp/>originOffset);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>LL8Packet*<sp/>targetBase<sp/>=<sp/>(LL8Packet*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)targetPtr<sp/>+<sp/>targetOffset);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nElem<sp/>=<sp/>originBytes<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>threadId;<sp/>i<sp/>&lt;<sp/>nElem;<sp/>i<sp/>+=<sp/>numThreads)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>LL8Packet*<sp/>pkt<sp/>=<sp/>&amp;targetBase[i];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>pkt-&gt;write(originBase[i],<sp/>flag);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getLL8Packets(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>targetPtr,<sp/>uint64_t<sp/>targetOffset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>originPtr,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>originOffset,<sp/>uint64_t<sp/>originBytes,<sp/>uint32_t<sp/>threadId,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numThreads,<sp/>uint32_t<sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>should<sp/>be<sp/>aligned<sp/>to<sp/>4<sp/>bytes<sp/>&amp;<sp/>size<sp/>should<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>4<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LL8Packet*<sp/>targetBase<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LL8Packet*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)targetPtr<sp/>+<sp/>targetOffset);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>uint32_t*<sp/>originBase<sp/>=<sp/>(uint32_t*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)originPtr<sp/>+<sp/>originOffset);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nElem<sp/>=<sp/>originBytes<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>threadId;<sp/>i<sp/>&lt;<sp/>nElem;<sp/>i<sp/>+=<sp/>numThreads)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LL8Packet*<sp/>pkt<sp/>=<sp/>&amp;targetBase[i];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>originBase[i]<sp/>=<sp/>pkt-&gt;read(flag);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PacketType<sp/>=<sp/>LL16Packet&gt;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>putPackets(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>targetPtr,<sp/>uint64_t<sp/>targetOffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>originPtr,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>originOffset,<sp/>uint64_t<sp/>originBytes,<sp/>uint32_t<sp/>threadId,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numThreads,<sp/>uint32_t<sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same&lt;PacketType,<sp/>LL16Packet&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>putLL16Packets(targetPtr,<sp/>targetOffset,<sp/>originPtr,<sp/>originOffset,<sp/>originBytes,<sp/>threadId,<sp/>numThreads,<sp/>flag);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same&lt;PacketType,<sp/>LL8Packet&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>putLL8Packets(targetPtr,<sp/>targetOffset,<sp/>originPtr,<sp/>originOffset,<sp/>originBytes,<sp/>threadId,<sp/>numThreads,<sp/>flag);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_same&lt;PacketType,<sp/>LL16Packet&gt;::value<sp/>||<sp/>std::is_same&lt;PacketType,<sp/>LL8Packet&gt;::value,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>packet<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PacketType<sp/>=<sp/>LL16Packet&gt;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getPackets(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>targetPtr,<sp/>uint64_t<sp/>targetOffset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>originPtr,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>originOffset,<sp/>uint64_t<sp/>originBytes,<sp/>uint32_t<sp/>threadId,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numThreads,<sp/>uint32_t<sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same&lt;PacketType,<sp/>LL16Packet&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>getLL16Packets(targetPtr,<sp/>targetOffset,<sp/>originPtr,<sp/>originOffset,<sp/>originBytes,<sp/>threadId,<sp/>numThreads,<sp/>flag);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same&lt;PacketType,<sp/>LL8Packet&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>getLL8Packets(targetPtr,<sp/>targetOffset,<sp/>originPtr,<sp/>originOffset,<sp/>originBytes,<sp/>threadId,<sp/>numThreads,<sp/>flag);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_same&lt;PacketType,<sp/>LL16Packet&gt;::value<sp/>||<sp/>std::is_same&lt;PacketType,<sp/>LL8Packet&gt;::value,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>packet<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(MSCCLPP_DEVICE_COMPILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mscclpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>MSCCLPP_PACKET_DEVICE_HPP_</highlight></codeline>
    </programlisting>
    <location file="/root/mscclpp/include/mscclpp/packet_device.hpp"/>
  </compounddef>
</doxygen>
