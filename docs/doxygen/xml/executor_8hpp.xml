<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="executor_8hpp" kind="file" language="C++">
    <compoundname>executor.hpp</compoundname>
    <includes local="no">memory</includes>
    <includes refid="core_8hpp" local="no">mscclpp/core.hpp</includes>
    <includes local="no">unordered_map</includes>
    <incdepgraph>
      <node id="1">
        <label>executor.hpp</label>
        <link refid="executor_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>mscclpp/core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>linux/version.h</label>
      </node>
      <node id="9">
        <label>cuda_runtime.h</label>
      </node>
      <node id="14">
        <label>stdexcept</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="7">
        <label>mscclpp/gpu.hpp</label>
        <link refid="gpu_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>bitset</label>
      </node>
      <node id="6">
        <label>future</label>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="17">
        <label>unordered_map</label>
      </node>
      <node id="8">
        <label>cuda.h</label>
      </node>
      <node id="12">
        <label>cstring</label>
      </node>
      <node id="11">
        <label>mscclpp/gpu_utils.hpp</label>
        <link refid="gpu__utils_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmscclpp_1_1ExecutionPlan" prot="public">mscclpp::ExecutionPlan</innerclass>
    <innerclass refid="classmscclpp_1_1Executor" prot="public">mscclpp::Executor</innerclass>
    <innernamespace refid="namespacemscclpp">mscclpp</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MSCCLPP_EXECUTOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSCCLPP_EXECUTOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="core_8hpp" kindref="compound">mscclpp/core.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemscclpp" kindref="compound">mscclpp</ref><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="namespacemscclpp_1a245e0406ab2ec4845cd62b0def5299c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1a245e0406ab2ec4845cd62b0def5299c4" kindref="member">DataType</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a245e0406ab2ec4845cd62b0def5299c4a6495adba09844fac8eeb0aba86e6f1bf" kindref="member">INT32</ref>,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a245e0406ab2ec4845cd62b0def5299c4a17266551181f69a1b4a3ad5c9e270afc" kindref="member">UINT32</ref>,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a245e0406ab2ec4845cd62b0def5299c4ac49f280a5ad551ccc77be0b01a2f386a" kindref="member">FLOAT16</ref>,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a245e0406ab2ec4845cd62b0def5299c4a967d280b5c16d95f2947647dd2ca6cc2" kindref="member">FLOAT32</ref>,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a245e0406ab2ec4845cd62b0def5299c4aa4b19a06b5361a32b32759aa26ffdbab" kindref="member">BFLOAT16</ref>,</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="namespacemscclpp_1a2ec75f8e9d6c6de7fc1532a6c89237a2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1a2ec75f8e9d6c6de7fc1532a6c89237a2" kindref="member">PacketType</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a2ec75f8e9d6c6de7fc1532a6c89237a2af21c479d93a15ab23a8f377d7bf85a56" kindref="member">LL8</ref>,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a2ec75f8e9d6c6de7fc1532a6c89237a2a1cf99f8f958b06f0ac3e38321e1f53d4" kindref="member">LL16</ref>,</highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="classmscclpp_1_1ExecutionPlan" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1ExecutionPlan" kindref="compound">ExecutionPlan</ref><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1ExecutionPlan_1a44258711598e397203fe3557cb160b02" kindref="member">ExecutionPlan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>planPath);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1ExecutionPlan_1a0e36198cc7ad5add36f4831f3794a88b" kindref="member">~ExecutionPlan</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Impl&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classmscclpp_1_1ExecutionPlan_1a763b2f90bc53f92d680a635fe28e858e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Executor" kindref="compound">Executor</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classmscclpp_1_1Executor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Executor" kindref="compound">Executor</ref><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Executor_1a9a459bb447b826d239f612e0d613dd44" kindref="member">Executor</ref>(std::shared_ptr&lt;Communicator&gt;<sp/>comm);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Executor_1a9a459bb447b826d239f612e0d613dd44" kindref="member">Executor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Executor" kindref="compound">Executor</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Executor" kindref="compound">Executor</ref>&amp;<sp/><ref refid="classmscclpp_1_1Executor_1a041bd8c7630a8d4b3246cffdd7c6c3d5" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Executor" kindref="compound">Executor</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Executor_1a85c8da4d0aa2ae24cba5b84c7d462765" kindref="member">~Executor</ref>();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Executor_1a7eec006eebd0d03eededdf9713a5485c" kindref="member">execute</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>sendbuff,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>recvBuff,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sendBuffSize,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>recvBuffSize,<sp/><ref refid="namespacemscclpp_1a245e0406ab2ec4845cd62b0def5299c4" kindref="member">DataType</ref><sp/>dataType,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1ExecutionPlan" kindref="compound">ExecutionPlan</ref>&amp;<sp/>plan,<sp/>cudaStream_t<sp/>stream,<sp/><ref refid="namespacemscclpp_1a2ec75f8e9d6c6de7fc1532a6c89237a2" kindref="member">PacketType</ref><sp/>packetType<sp/>=<sp/><ref refid="namespacemscclpp_1a2ec75f8e9d6c6de7fc1532a6c89237a2a1cf99f8f958b06f0ac3e38321e1f53d4" kindref="member">PacketType::LL16</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Impl&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mscclpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>MSCCLPP_EXECUTOR_HPP_</highlight></codeline>
    </programlisting>
    <location file="/root/mscclpp/include/mscclpp/executor.hpp"/>
  </compounddef>
</doxygen>
