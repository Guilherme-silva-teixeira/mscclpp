<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="core_8hpp" kind="file" language="C++">
    <compoundname>core.hpp</compoundname>
    <includes local="no">array</includes>
    <includes local="no">bitset</includes>
    <includes local="no">future</includes>
    <includes local="no">memory</includes>
    <includes refid="gpu_8hpp" local="no">mscclpp/gpu.hpp</includes>
    <includes refid="gpu__utils_8hpp" local="no">mscclpp/gpu_utils.hpp</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="errors_8hpp" local="yes">errors.hpp</includes>
    <includedby refid="executor_8hpp" local="no">executor.hpp</includedby>
    <includedby refid="proxy__channel_8hpp" local="yes">proxy_channel.hpp</includedby>
    <includedby refid="semaphore_8hpp" local="yes">semaphore.hpp</includedby>
    <includedby refid="sm__channel_8hpp" local="yes">sm_channel.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>linux/version.h</label>
      </node>
      <node id="8">
        <label>cuda_runtime.h</label>
      </node>
      <node id="13">
        <label>stdexcept</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="6">
        <label>mscclpp/gpu.hpp</label>
        <link refid="gpu_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>bitset</label>
      </node>
      <node id="4">
        <label>future</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
      <node id="2">
        <label>array</label>
      </node>
      <node id="7">
        <label>cuda.h</label>
      </node>
      <node id="11">
        <label>cstring</label>
      </node>
      <node id="10">
        <label>mscclpp/gpu_utils.hpp</label>
        <link refid="gpu__utils_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>executor.hpp</label>
        <link refid="executor_8hpp"/>
      </node>
      <node id="1">
        <label>core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>semaphore.hpp</label>
        <link refid="semaphore_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>proxy_channel.hpp</label>
        <link refid="proxy__channel_8hpp"/>
      </node>
      <node id="5">
        <label>sm_channel.hpp</label>
        <link refid="sm__channel_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmscclpp_1_1Bootstrap" prot="public">mscclpp::Bootstrap</innerclass>
    <innerclass refid="classmscclpp_1_1TcpBootstrap" prot="public">mscclpp::TcpBootstrap</innerclass>
    <innerclass refid="classmscclpp_1_1TransportFlags" prot="public">mscclpp::TransportFlags</innerclass>
    <innerclass refid="classmscclpp_1_1RegisteredMemory" prot="public">mscclpp::RegisteredMemory</innerclass>
    <innerclass refid="classmscclpp_1_1Endpoint" prot="public">mscclpp::Endpoint</innerclass>
    <innerclass refid="classmscclpp_1_1Connection" prot="public">mscclpp::Connection</innerclass>
    <innerclass refid="structmscclpp_1_1EndpointConfig" prot="public">mscclpp::EndpointConfig</innerclass>
    <innerclass refid="classmscclpp_1_1Context" prot="public">mscclpp::Context</innerclass>
    <innerclass refid="structmscclpp_1_1Setuppable" prot="public">mscclpp::Setuppable</innerclass>
    <innerclass refid="classmscclpp_1_1NonblockingFuture" prot="public">mscclpp::NonblockingFuture</innerclass>
    <innerclass refid="classmscclpp_1_1Communicator" prot="public">mscclpp::Communicator</innerclass>
    <innernamespace refid="namespacemscclpp">mscclpp</innernamespace>
    <innernamespace refid="namespacemscclpp_1_1detail">mscclpp::detail</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="core_8hpp_1a2268d0e9c6def6355d26c335ea88b115" prot="public" static="no">
        <name>MSCCLPP_MAJOR</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/core.hpp" line="7" column="9" bodyfile="/root/mscclpp/include/mscclpp/core.hpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8hpp_1aaf11c0aee52527ee3a8c1dcab14a791b" prot="public" static="no">
        <name>MSCCLPP_MINOR</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/core.hpp" line="8" column="9" bodyfile="/root/mscclpp/include/mscclpp/core.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8hpp_1a59a20ac40c71441a66aa9ce72a78e906" prot="public" static="no">
        <name>MSCCLPP_PATCH</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/core.hpp" line="9" column="9" bodyfile="/root/mscclpp/include/mscclpp/core.hpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8hpp_1a7ed91b6d7c406d85b6e4c4712e005064" prot="public" static="no">
        <name>MSCCLPP_VERSION</name>
        <initializer>(<ref refid="core_8hpp_1a2268d0e9c6def6355d26c335ea88b115" kindref="member">MSCCLPP_MAJOR</ref> * 10000 + <ref refid="core_8hpp_1aaf11c0aee52527ee3a8c1dcab14a791b" kindref="member">MSCCLPP_MINOR</ref> * 100 + <ref refid="core_8hpp_1a59a20ac40c71441a66aa9ce72a78e906" kindref="member">MSCCLPP_PATCH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/core.hpp" line="10" column="9" bodyfile="/root/mscclpp/include/mscclpp/core.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8hpp_1a343926bd0143fdf98a7f173cb45986a9" prot="public" static="no">
        <name>MSCCLPP_UNIQUE_ID_BYTES</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/core.hpp" line="25" column="9" bodyfile="/root/mscclpp/include/mscclpp/core.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MSCCLPP_CORE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSCCLPP_CORE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="core_8hpp_1a2268d0e9c6def6355d26c335ea88b115" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSCCLPP_MAJOR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="core_8hpp_1aaf11c0aee52527ee3a8c1dcab14a791b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSCCLPP_MINOR<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="core_8hpp_1a59a20ac40c71441a66aa9ce72a78e906" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSCCLPP_PATCH<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="core_8hpp_1a7ed91b6d7c406d85b6e4c4712e005064" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSCCLPP_VERSION<sp/>(MSCCLPP_MAJOR<sp/>*<sp/>10000<sp/>+<sp/>MSCCLPP_MINOR<sp/>*<sp/>100<sp/>+<sp/>MSCCLPP_PATCH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bitset&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;future&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gpu_8hpp" kindref="compound">mscclpp/gpu.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gpu__utils_8hpp" kindref="compound">mscclpp/gpu_utils.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="errors_8hpp" kindref="compound">errors.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemscclpp" kindref="compound">mscclpp</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="core_8hpp_1a343926bd0143fdf98a7f173cb45986a9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSCCLPP_UNIQUE_ID_BYTES<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="namespacemscclpp_1a19370d8ff8c2df952046da3ba001f3c3" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1a19370d8ff8c2df952046da3ba001f3c3" kindref="member">UniqueId</ref><sp/>=<sp/>std::array&lt;uint8_t,<sp/>MSCCLPP_UNIQUE_ID_BYTES&gt;;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">std::string<sp/><ref refid="namespacemscclpp_1a05204aa1421dccefd7317279e7c38d5c" kindref="member">version</ref>();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classmscclpp_1_1Bootstrap" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Bootstrap" kindref="compound">Bootstrap</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36" refid="classmscclpp_1_1Bootstrap_1a899129191be1369ad4cbd1c1d984ca19" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Bootstrap_1a899129191be1369ad4cbd1c1d984ca19" kindref="member">Bootstrap</ref>(){};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap_1aebeededabb3c6262b4c464ad563c87ce" kindref="member">~Bootstrap</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap_1a10022347ad48c3bf287de670dbc36761" kindref="member">getRank</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap_1a87e0617ba1f3f23f4f3727e346776dd7" kindref="member">getNranks</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap_1aadfcff6cb4251705297c29f18a8b1d1a" kindref="member">getNranksPerNode</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap_1a84e2033bb8b197a0d19e2b4c1b2f6bd5" kindref="member">send</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap_1a0bcc9e55f2b14b7013476e802418ce70" kindref="member">recv</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap_1af1a3f26e418d020dc1e145ef22ef9328" kindref="member">allGather</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>allData,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap_1a99aa291ae8bf645c9853ee603b8e3794" kindref="member">barrier</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap_1ae5c6937a9e14d6b08966e79fe38c1e21" kindref="member">groupBarrier</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>ranks);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap_1a84e2033bb8b197a0d19e2b4c1b2f6bd5" kindref="member">send</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;char&gt;&amp;<sp/>data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap_1a0bcc9e55f2b14b7013476e802418ce70" kindref="member">recv</ref>(std::vector&lt;char&gt;&amp;<sp/>data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classmscclpp_1_1TcpBootstrap" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1TcpBootstrap" kindref="compound">TcpBootstrap</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Bootstrap" kindref="compound">Bootstrap</ref><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1a19370d8ff8c2df952046da3ba001f3c3" kindref="member">UniqueId</ref><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1a48a32333bd3c59760843d34cc38c3cd2" kindref="member">createUniqueId</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1a5eb94b2579a9973957d873903f0730e7" kindref="member">TcpBootstrap</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRanks);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1af41527f180197af4ed6a589cd454c140" kindref="member">~TcpBootstrap</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a19370d8ff8c2df952046da3ba001f3c3" kindref="member">UniqueId</ref><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1a42e706ec6fd395fd4ce2ceb4c33d5cbc" kindref="member">getUniqueId</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1a5b4ed57f6ca910958730fd6902d52b60" kindref="member">initialize</ref>(<ref refid="namespacemscclpp_1a19370d8ff8c2df952046da3ba001f3c3" kindref="member">UniqueId</ref><sp/>uniqueId,<sp/>int64_t<sp/>timeoutSec<sp/>=<sp/>30);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1a5b4ed57f6ca910958730fd6902d52b60" kindref="member">initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>ifIpPortTrio,<sp/>int64_t<sp/>timeoutSec<sp/>=<sp/>30);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1a5626eeaefd2077e77af3a8a3091330cd" kindref="member">getRank</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1a8b492af79a381b05eddbc20b60620ed3" kindref="member">getNranks</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1ab4733042b3e69b34ff5c1f9fe3a22f59" kindref="member">getNranksPerNode</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1a9257e0474c2e858038d6d18fe7e3b8cd" kindref="member">send</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1a3547a9251d27190099ca690877448993" kindref="member">recv</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1a75c07cdf8d10e77b5e1bb6bd4aed6654" kindref="member">allGather</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>allData,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TcpBootstrap_1a20747dc53f4485ebf080c135a352be12" kindref="member">barrier</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>interal<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>internal<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Impl&gt;<sp/>pimpl_;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" refkind="member"><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">Unknown</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unknown<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5a8c7ec76d5a330fb526292c4cd0111993" kindref="member">CudaIpc</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CUDA<sp/>IPC<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5a4bd6a6a63f68c8a22ee4882619410e82" kindref="member">Nvls</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NVLS<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5a6a5053e4054e9194a290da8442f29a5c" kindref="member">IB0</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>InfiniBand<sp/>device<sp/>0<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5a1f68a7ebea7dc4c5394aea292e9f0f45" kindref="member">IB1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>InfiniBand<sp/>device<sp/>1<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5a2451b52950545a82b6245ade95824ffb" kindref="member">IB2</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>InfiniBand<sp/>device<sp/>2<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5ab73258fcea9e16c11be6b0b8493087ce" kindref="member">IB3</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>InfiniBand<sp/>device<sp/>3<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5a0940acbe03c05a45793aaac8f9967416" kindref="member">IB4</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>InfiniBand<sp/>device<sp/>4<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5ac6aed92a3f88a500f307b88d0674f62f" kindref="member">IB5</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>InfiniBand<sp/>device<sp/>5<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5a4b664254eb1a6fedb52e6b781000ec41" kindref="member">IB6</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>InfiniBand<sp/>device<sp/>6<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5afbff6de8c76186402db75f8892040338" kindref="member">IB7</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>InfiniBand<sp/>device<sp/>7<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5abe2ae05fb04ddcf6efa31e63e0f0e111" kindref="member">Ethernet</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ethernet<sp/>transport<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5a7084f1074b04e617fc843c5fd32d8df7" kindref="member">NumTransports</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>transports.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">};</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="namespacemscclpp_1a5a14d1ce0857e0d3de41570ce434a517" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacemscclpp_1a5a14d1ce0857e0d3de41570ce434a517" kindref="member">TransportNames</ref>[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;UNK&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IPC&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;NVLS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IB0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IB1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IB2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IB3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;IB4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IB5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IB6&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;IB7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ETH&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;NUM&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="namespacemscclpp_1_1detail" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="152" refid="namespacemscclpp_1_1detail_1a244cf6ec06e88229aaca5f66fa8f0893" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1_1detail_1a244cf6ec06e88229aaca5f66fa8f0893" kindref="member">TransportFlagsSize</ref><sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">static_assert(<ref refid="namespacemscclpp_1_1detail_1a244cf6ec06e88229aaca5f66fa8f0893" kindref="member">TransportFlagsSize</ref><sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5a7084f1074b04e617fc843c5fd32d8df7" kindref="member">Transport::NumTransports</ref>),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TransportFlagsSize<sp/>must<sp/>match<sp/>the<sp/>number<sp/>of<sp/>transports&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156" refid="namespacemscclpp_1_1detail_1afe546a620f7aeead78e250d188eb1dd6" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1_1detail_1afe546a620f7aeead78e250d188eb1dd6" kindref="member">TransportFlagsBase</ref><sp/>=<sp/>std::bitset&lt;TransportFlagsSize&gt;;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="classmscclpp_1_1TransportFlags" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1_1detail_1afe546a620f7aeead78e250d188eb1dd6" kindref="member">detail::TransportFlagsBase</ref><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags_1a8f431e1c521f357776de8c53ffa51f6f" kindref="member">TransportFlags</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags_1a8f431e1c521f357776de8c53ffa51f6f" kindref="member">TransportFlags</ref>(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>transport);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags_1ac9a4764afa0d2fc666b2a8abf8c4e8a5" kindref="member">has</ref>(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>transport)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags_1a43fd58a7b336442ce0ac8c6c40a65f37" kindref="member">none</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags_1ad068407d3a354b948f5afe65a1b0d55e" kindref="member">any</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags_1a0bd787f2f3c4aa2dc4fa08c3f7fbc45b" kindref="member">all</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags_1a900c36a2133e72e280fbfafbf731ddcb" kindref="member">count</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref>&amp;<sp/><ref refid="classmscclpp_1_1TransportFlags_1a289913bfae398736e3d9a6108143071c" kindref="member">operator|=</ref>(<ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/>other);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="classmscclpp_1_1TransportFlags_1a29a081218913a06f8a5585664ec80adc" kindref="member">operator|</ref>(<ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="classmscclpp_1_1TransportFlags_1a29a081218913a06f8a5585664ec80adc" kindref="member">operator|</ref>(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>transport)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref>&amp;<sp/><ref refid="classmscclpp_1_1TransportFlags_1a6ae5594b574dd4a4945c0101eaed4161" kindref="member">operator&amp;=</ref>(<ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/>other);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="classmscclpp_1_1TransportFlags_1a1c4fd205887f80395c23d53e9e861773" kindref="member">operator&amp;</ref>(<ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="classmscclpp_1_1TransportFlags_1a1c4fd205887f80395c23d53e9e861773" kindref="member">operator&amp;</ref>(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>transport)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref>&amp;<sp/><ref refid="classmscclpp_1_1TransportFlags_1aec0ccdd401f53f0b479413e1eeb8959a" kindref="member">operator^=</ref>(<ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/>other);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="classmscclpp_1_1TransportFlags_1aa638cd8ce3c8341e5a7938b52194ef9b" kindref="member">operator^</ref>(<ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="classmscclpp_1_1TransportFlags_1aa638cd8ce3c8341e5a7938b52194ef9b" kindref="member">operator^</ref>(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>transport)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="classmscclpp_1_1TransportFlags_1a82f9e58ea40a0d87e6add3c8d26a7dbe" kindref="member">operator~</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags_1ab5c9f9fb5708506d1bf826a1bf52c3a9" kindref="member">operator==</ref>(<ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags_1a86a40422be6816924a43f00a39913c1d" kindref="member">operator!=</ref>(<ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1_1detail_1afe546a620f7aeead78e250d188eb1dd6" kindref="member">detail::TransportFlagsBase</ref><sp/><ref refid="classmscclpp_1_1TransportFlags_1ac83b750adebe27e9c4876e2c97b6252b" kindref="member">toBitset</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags_1a8f431e1c521f357776de8c53ffa51f6f" kindref="member">TransportFlags</ref>(<ref refid="namespacemscclpp_1_1detail_1afe546a620f7aeead78e250d188eb1dd6" kindref="member">detail::TransportFlagsBase</ref><sp/>bitset);</highlight></codeline>
<codeline lineno="277"><highlight class="normal">};</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="namespacemscclpp_1a0c632c46b1f8d8de99fcbbbb97fb67e4" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="namespacemscclpp_1a0c632c46b1f8d8de99fcbbbb97fb67e4" kindref="member">operator|</ref>(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>transport1,<sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>transport2)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref>(transport1)<sp/>|<sp/>transport2;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="namespacemscclpp_1a0e8406f18c274a5ce00f6f8c598b9583" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="namespacemscclpp_1a0e8406f18c274a5ce00f6f8c598b9583" kindref="member">operator&amp;</ref>(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>transport1,<sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>transport2)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref>(transport1)<sp/>&amp;<sp/>transport2;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="namespacemscclpp_1a982ccfce637872e7b3d07797edcd2c7b" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="namespacemscclpp_1a982ccfce637872e7b3d07797edcd2c7b" kindref="member">operator^</ref>(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>transport1,<sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>transport2)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref>(transport1)<sp/>^<sp/>transport2;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1ac2f0d27f4155eba491c250b3cc9a062b" kindref="member">getIBDeviceCount</ref>();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">std::string<sp/><ref refid="namespacemscclpp_1afe4b8fcebe602c294a81f65d2f004824" kindref="member">getIBDeviceName</ref>(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/>ibTransport);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/><ref refid="namespacemscclpp_1af9217af381b04d6860c42a8f8d69b0ac" kindref="member">getIBTransportByDeviceName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>ibDeviceName);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Context;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Connection;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="classmscclpp_1_1RegisteredMemory" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1RegisteredMemory" kindref="compound">RegisteredMemory</ref><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1RegisteredMemory_1adc1495674137bba267dd551e8785f190" kindref="member">RegisteredMemory</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1RegisteredMemory_1a3311b826e508ea3b32a1854a1b374762" kindref="member">~RegisteredMemory</ref>();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classmscclpp_1_1RegisteredMemory_1a1c13a23ac813d58d565d77aae14d9985" kindref="member">data</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classmscclpp_1_1RegisteredMemory_1a25cdadf35f55e37bdf612d0230735a9b" kindref="member">originalDataPtr</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1RegisteredMemory_1afce245c8338ddbda17328db4568d1866" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="classmscclpp_1_1RegisteredMemory_1a6b246e1c9320fa285efcad1d197acb7b" kindref="member">transports</ref>();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>std::vector&lt;char&gt;<sp/><ref refid="classmscclpp_1_1RegisteredMemory_1a575c641be12844002cf834d7b3d326a5" kindref="member">serialize</ref>();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1RegisteredMemory" kindref="compound">RegisteredMemory</ref><sp/><ref refid="classmscclpp_1_1RegisteredMemory_1a3565c1cbeccce649ed27b9b52933f003" kindref="member">deserialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;char&gt;&amp;<sp/><ref refid="classmscclpp_1_1RegisteredMemory_1a1c13a23ac813d58d565d77aae14d9985" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>interal<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Internal<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1RegisteredMemory_1adc1495674137bba267dd551e8785f190" kindref="member">RegisteredMemory</ref>(std::shared_ptr&lt;Impl&gt;<sp/>pimpl);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>internal<sp/>implementation.<sp/>A<sp/>shared_ptr<sp/>is<sp/>used<sp/>since<sp/>RegisteredMemory<sp/>is<sp/>immutable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Impl&gt;<sp/>pimpl_;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="classmscclpp_1_1RegisteredMemory_1ac26c806e60ca4a0547680edb68f6e39b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Context" kindref="compound">Context</ref>;</highlight></codeline>
<codeline lineno="377" refid="classmscclpp_1_1RegisteredMemory_1a54a11fdc71e1679a42fa0c0e3856673d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Connection" kindref="compound">Connection</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">};</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="classmscclpp_1_1Endpoint" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Endpoint" kindref="compound">Endpoint</ref><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Endpoint_1a33b41dd99c476ae84df501a146876367" kindref="member">Endpoint</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/><ref refid="classmscclpp_1_1Endpoint_1adb3143b0a2c6a363e4febfe81fafb20b" kindref="member">transport</ref>();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>std::vector&lt;char&gt;<sp/><ref refid="classmscclpp_1_1Endpoint_1af8d24e2c3614491cf56a7b3faba744e6" kindref="member">serialize</ref>();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Endpoint" kindref="compound">Endpoint</ref><sp/><ref refid="classmscclpp_1_1Endpoint_1ae1aae33321f716abf24176d6c80ab39d" kindref="member">deserialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;char&gt;&amp;<sp/>data);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>interal<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Internal<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Endpoint_1a33b41dd99c476ae84df501a146876367" kindref="member">Endpoint</ref>(std::shared_ptr&lt;Impl&gt;<sp/>pimpl);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>internal<sp/>implementation.<sp/>A<sp/>shared_ptr<sp/>is<sp/>used<sp/>since<sp/>Endpoint<sp/>is<sp/>immutable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Impl&gt;<sp/>pimpl_;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="classmscclpp_1_1Endpoint_1ac26c806e60ca4a0547680edb68f6e39b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Context" kindref="compound">Context</ref>;</highlight></codeline>
<codeline lineno="413" refid="classmscclpp_1_1Endpoint_1a54a11fdc71e1679a42fa0c0e3856673d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Connection" kindref="compound">Connection</ref>;</highlight></codeline>
<codeline lineno="414"><highlight class="normal">};</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="classmscclpp_1_1Connection" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Connection" kindref="compound">Connection</ref><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Connection_1a286f0fc3a946e33611c9c106553fdaee" kindref="member">~Connection</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Connection_1a4a78353163997c281e0f362f2e739353" kindref="member">write</ref>(<ref refid="classmscclpp_1_1RegisteredMemory" kindref="compound">RegisteredMemory</ref><sp/>dst,<sp/>uint64_t<sp/>dstOffset,<sp/><ref refid="classmscclpp_1_1RegisteredMemory" kindref="compound">RegisteredMemory</ref><sp/>src,<sp/>uint64_t<sp/>srcOffset,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>size)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Connection_1a2c273f8dc12c89bf8fe62ea6bbcd51d4" kindref="member">updateAndSync</ref>(<ref refid="classmscclpp_1_1RegisteredMemory" kindref="compound">RegisteredMemory</ref><sp/>dst,<sp/>uint64_t<sp/>dstOffset,<sp/>uint64_t*<sp/>src,<sp/>uint64_t<sp/>newValue)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Connection_1a0ba24623e37399d71238ea3175f9a708" kindref="member">flush</ref>(int64_t<sp/>timeoutUsec<sp/>=<sp/>3e7)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/><ref refid="classmscclpp_1_1Connection_1a9d6c1c244c07cbcd43389f0f96ea664f" kindref="member">transport</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/><ref refid="classmscclpp_1_1Connection_1abd5e8b2fd7c51566ca76198e5b4e45df" kindref="member">remoteTransport</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classmscclpp_1_1Connection_1a73ce3b8c610bb0241f5823c86c7b1fa5" kindref="member">getTransportName</ref>();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Internal<sp/>methods<sp/>for<sp/>getting<sp/>implementation<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;RegisteredMemory::Impl&gt;<sp/><ref refid="classmscclpp_1_1Connection_1a37ace3de29efd9638c19f9b6f7f33f64" kindref="member">getImpl</ref>(<ref refid="classmscclpp_1_1RegisteredMemory" kindref="compound">RegisteredMemory</ref>&amp;<sp/>memory);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Endpoint::Impl&gt;<sp/><ref refid="classmscclpp_1_1Connection_1a37ace3de29efd9638c19f9b6f7f33f64" kindref="member">getImpl</ref>(<ref refid="classmscclpp_1_1Endpoint" kindref="compound">Endpoint</ref>&amp;<sp/>memory);</highlight></codeline>
<codeline lineno="461"><highlight class="normal">};</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="structmscclpp_1_1EndpointConfig" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmscclpp_1_1EndpointConfig" kindref="compound">EndpointConfig</ref><sp/>{</highlight></codeline>
<codeline lineno="465" refid="structmscclpp_1_1EndpointConfig_1ab3ca5aca93af630f26766bf3bc80bc21" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1EndpointConfig_1ab3ca5aca93af630f26766bf3bc80bc21" kindref="member">DefaultMaxCqSize</ref><sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="466" refid="structmscclpp_1_1EndpointConfig_1a386e60334cfaff1b077325170f35a45e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1EndpointConfig_1a386e60334cfaff1b077325170f35a45e" kindref="member">DefaultMaxCqPollNum</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="467" refid="structmscclpp_1_1EndpointConfig_1af0a91cc2ce66e43a837c4537c676c6e5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1EndpointConfig_1af0a91cc2ce66e43a837c4537c676c6e5" kindref="member">DefaultMaxSendWr</ref><sp/>=<sp/>8192;</highlight></codeline>
<codeline lineno="468" refid="structmscclpp_1_1EndpointConfig_1a9a953a01ee0f8d2e9354ac2314a0a534" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1EndpointConfig_1a9a953a01ee0f8d2e9354ac2314a0a534" kindref="member">DefaultMaxWrPerSend</ref><sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="structmscclpp_1_1EndpointConfig_1a7e087c523405a3c5fa831c5d3cd92eee" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/><ref refid="structmscclpp_1_1EndpointConfig_1a7e087c523405a3c5fa831c5d3cd92eee" kindref="member">transport</ref>;</highlight></codeline>
<codeline lineno="471" refid="structmscclpp_1_1EndpointConfig_1adf8fcb0cf1629291779357d95e10940f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1EndpointConfig_1adf8fcb0cf1629291779357d95e10940f" kindref="member">ibMaxCqSize</ref><sp/>=<sp/><ref refid="structmscclpp_1_1EndpointConfig_1ab3ca5aca93af630f26766bf3bc80bc21" kindref="member">DefaultMaxCqSize</ref>;</highlight></codeline>
<codeline lineno="472" refid="structmscclpp_1_1EndpointConfig_1a1731b60320378fabd2bc0a25dfc4e5b8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1EndpointConfig_1a1731b60320378fabd2bc0a25dfc4e5b8" kindref="member">ibMaxCqPollNum</ref><sp/>=<sp/><ref refid="structmscclpp_1_1EndpointConfig_1a386e60334cfaff1b077325170f35a45e" kindref="member">DefaultMaxCqPollNum</ref>;</highlight></codeline>
<codeline lineno="473" refid="structmscclpp_1_1EndpointConfig_1a3664a28757c214abd288b4b2e41e78c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1EndpointConfig_1a3664a28757c214abd288b4b2e41e78c4" kindref="member">ibMaxSendWr</ref><sp/>=<sp/><ref refid="structmscclpp_1_1EndpointConfig_1af0a91cc2ce66e43a837c4537c676c6e5" kindref="member">DefaultMaxSendWr</ref>;</highlight></codeline>
<codeline lineno="474" refid="structmscclpp_1_1EndpointConfig_1aeb249794110e711618e2683dec85ddb5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1EndpointConfig_1aeb249794110e711618e2683dec85ddb5" kindref="member">ibMaxWrPerSend</ref><sp/>=<sp/><ref refid="structmscclpp_1_1EndpointConfig_1a9a953a01ee0f8d2e9354ac2314a0a534" kindref="member">DefaultMaxWrPerSend</ref>;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="477" refid="structmscclpp_1_1EndpointConfig_1a12ea27a851fd0dca2b06f489ba49e6a7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structmscclpp_1_1EndpointConfig_1a12ea27a851fd0dca2b06f489ba49e6a7" kindref="member">EndpointConfig</ref>()<sp/>:<sp/><ref refid="structmscclpp_1_1EndpointConfig_1a7e087c523405a3c5fa831c5d3cd92eee" kindref="member">transport</ref>(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref>::<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">Unknown</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="structmscclpp_1_1EndpointConfig_1aefd631df12e9e3de680d5836a0578a32" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structmscclpp_1_1EndpointConfig_1aefd631df12e9e3de680d5836a0578a32" kindref="member">EndpointConfig</ref>(<ref refid="namespacemscclpp_1a8a3c0a9f4ff7265a1fc612e32d8004a5" kindref="member">Transport</ref><sp/><ref refid="structmscclpp_1_1EndpointConfig_1a7e087c523405a3c5fa831c5d3cd92eee" kindref="member">transport</ref>)<sp/>:<sp/><ref refid="structmscclpp_1_1EndpointConfig_1a7e087c523405a3c5fa831c5d3cd92eee" kindref="member">transport</ref>(<ref refid="structmscclpp_1_1EndpointConfig_1a7e087c523405a3c5fa831c5d3cd92eee" kindref="member">transport</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="483"><highlight class="normal">};</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="classmscclpp_1_1Context" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Context" kindref="compound">Context</ref><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Context_1ab44953106d9bd1b4d509d60e3045fb78" kindref="member">Context</ref>();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Context_1a551861e75db451016e29a2d08f0d88fc" kindref="member">~Context</ref>();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1RegisteredMemory" kindref="compound">RegisteredMemory</ref><sp/><ref refid="classmscclpp_1_1Context_1a1f4aa133e4d56ac59a611a3119e37e7c" kindref="member">registerMemory</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/>transports);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Endpoint" kindref="compound">Endpoint</ref><sp/><ref refid="classmscclpp_1_1Context_1a1708feee05e072560ae83e3bb9915398" kindref="member">createEndpoint</ref>(<ref refid="structmscclpp_1_1EndpointConfig" kindref="compound">EndpointConfig</ref><sp/>config);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Connection&gt;<sp/><ref refid="classmscclpp_1_1Context_1ac7a474fecb0843f29eac0a1c1f631501" kindref="member">connect</ref>(<ref refid="classmscclpp_1_1Endpoint" kindref="compound">Endpoint</ref><sp/>localEndpoint,<sp/><ref refid="classmscclpp_1_1Endpoint" kindref="compound">Endpoint</ref><sp/>remoteEndpoint);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>interal<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>internal<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Impl&gt;<sp/>pimpl_;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="classmscclpp_1_1Context_1ab37b6eaaea41aadc7a1368770d42e06b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1RegisteredMemory" kindref="compound">RegisteredMemory</ref>;</highlight></codeline>
<codeline lineno="540" refid="classmscclpp_1_1Context_1a500d74fc41e3ab6b4889a579193566ed" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Endpoint" kindref="compound">Endpoint</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">};</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="structmscclpp_1_1Setuppable" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmscclpp_1_1Setuppable" kindref="compound">Setuppable</ref><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1Setuppable_1af2561909cc34d2ed14abe7104d7ba8de" kindref="member">~Setuppable</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1Setuppable_1a034319ab87641125260ebd813696a5fc" kindref="member">beginSetup</ref>(std::shared_ptr&lt;Bootstrap&gt;<sp/>bootstrap);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1Setuppable_1a7711cd5132a03d6e75b433d956ecb32d" kindref="member">endSetup</ref>(std::shared_ptr&lt;Bootstrap&gt;<sp/>bootstrap);</highlight></codeline>
<codeline lineno="558"><highlight class="normal">};</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="562" refid="classmscclpp_1_1NonblockingFuture" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1NonblockingFuture" kindref="compound">NonblockingFuture</ref><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>std::shared_future&lt;T&gt;<sp/>future;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1NonblockingFuture_1a0f2ddff6636f798558edb8d865d4e766" kindref="member">NonblockingFuture</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="classmscclpp_1_1NonblockingFuture_1a4c2070ffab1d6717159fb4913bcea2c0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1NonblockingFuture_1a4c2070ffab1d6717159fb4913bcea2c0" kindref="member">NonblockingFuture</ref>(std::shared_future&lt;T&gt;&amp;&amp;<sp/>future)<sp/>:<sp/>future(<ref refid="namespacestd" kindref="compound">std</ref>::move(future))<sp/>{}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="577" refid="classmscclpp_1_1NonblockingFuture_1acb37162793ab9f481db9ce84ed5f84c1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1NonblockingFuture_1acb37162793ab9f481db9ce84ed5f84c1" kindref="member">ready</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>future.wait_for(std::chrono::seconds(0))<sp/>==<sp/>std::future_status::ready;<sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="classmscclpp_1_1NonblockingFuture_1ab79350c4b28c219a5d85bd59c23ed165" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classmscclpp_1_1NonblockingFuture_1ab79350c4b28c219a5d85bd59c23ed165" kindref="member">get</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classmscclpp_1_1NonblockingFuture_1acb37162793ab9f481db9ce84ed5f84c1" kindref="member">ready</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Error" kindref="compound">Error</ref>(</highlight><highlight class="stringliteral">&quot;NonblockingFuture::get()<sp/>called<sp/>before<sp/>ready&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemscclpp_1abfe795a8ee512f106d16ae733255ddbcaa524b35e5f186bcacbedd2b6661224aa" kindref="member">ErrorCode::InvalidUsage</ref>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>future.get();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal">};</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="602" refid="classmscclpp_1_1Communicator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmscclpp_1_1Communicator" kindref="compound">Communicator</ref><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Communicator_1a11b52d62f42d5deecdfc74ea6cad2089" kindref="member">Communicator</ref>(std::shared_ptr&lt;Bootstrap&gt;<sp/><ref refid="classmscclpp_1_1Communicator_1a3f6184e06629f370d23fa67170c358c4" kindref="member">bootstrap</ref>,<sp/>std::shared_ptr&lt;Context&gt;<sp/><ref refid="classmscclpp_1_1Communicator_1ab242faa5778c1f8a9abdb1e95b5274ca" kindref="member">context</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1Communicator_1af9d3df40a651fd623e6bbba149d34127" kindref="member">~Communicator</ref>();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Bootstrap&gt;<sp/><ref refid="classmscclpp_1_1Communicator_1a3f6184e06629f370d23fa67170c358c4" kindref="member">bootstrap</ref>();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Context&gt;<sp/><ref refid="classmscclpp_1_1Communicator_1ab242faa5778c1f8a9abdb1e95b5274ca" kindref="member">context</ref>();</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1RegisteredMemory" kindref="compound">RegisteredMemory</ref><sp/><ref refid="classmscclpp_1_1Communicator_1a537a32056272f718ca913a23bde5f1c8" kindref="member">registerMemory</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/>transports);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Communicator_1ad17015b7dc79d3848e39c844d69b785c" kindref="member">sendMemoryOnSetup</ref>(<ref refid="classmscclpp_1_1RegisteredMemory" kindref="compound">RegisteredMemory</ref><sp/>memory,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remoteRank,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1NonblockingFuture" kindref="compound">NonblockingFuture&lt;RegisteredMemory&gt;</ref><sp/><ref refid="classmscclpp_1_1Communicator_1a1a78462696471fbc78784be5e4448499" kindref="member">recvMemoryOnSetup</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remoteRank,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><ref refid="classmscclpp_1_1NonblockingFuture" kindref="compound">NonblockingFuture&lt;std::shared_ptr&lt;Connection&gt;</ref>&gt;<sp/><ref refid="classmscclpp_1_1Communicator_1a80c0ba6e6ccfdd827521a03535e575e6" kindref="member">connectOnSetup</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remoteRank,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag,<sp/><ref refid="structmscclpp_1_1EndpointConfig" kindref="compound">EndpointConfig</ref><sp/>localConfig);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Communicator_1a1791887f6a3197ab46253b948077d1a1" kindref="member">remoteRankOf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Connection" kindref="compound">Connection</ref>&amp;<sp/>connection);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Communicator_1a3d7c2f328081e381014fa6c5598988e6" kindref="member">tagOf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Connection" kindref="compound">Connection</ref>&amp;<sp/>connection);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Communicator_1a6a6489423bc5cb54d82062344f6f14c4" kindref="member">onSetup</ref>(std::shared_ptr&lt;Setuppable&gt;<sp/>setuppable);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1Communicator_1aae26dc138f2b2cbf14bfcb7e39266ca0" kindref="member">setup</ref>();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>interal<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>internal<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Impl&gt;<sp/>pimpl_;</highlight></codeline>
<codeline lineno="696"><highlight class="normal">};</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="namespacemscclpp_1a394245690cdad5f3f029ac8a4e311216" kindref="member">NoTransports</ref>;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="namespacemscclpp_1af4aaacb732590ef5e1cbbae173332e5c" kindref="member">AllIBTransports</ref>;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmscclpp_1_1TransportFlags" kindref="compound">TransportFlags</ref><sp/><ref refid="namespacemscclpp_1a664b35f70f5b7fcbb32ab7d71ec539d9" kindref="member">AllTransports</ref>;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="709" refid="namespacemscclpp_1ad527fb55e019c2b79a09d5be24c81aa6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1ad527fb55e019c2b79a09d5be24c81aa6" kindref="member">DeviceHandle</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1ad527fb55e019c2b79a09d5be24c81aa6" kindref="member">T::DeviceHandle</ref>;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="713" refid="namespacemscclpp_1af6fab3d5a649a2dff1467e9eeb3a7ee3" refkind="member"><highlight class="normal"><ref refid="namespacemscclpp_1ad527fb55e019c2b79a09d5be24c81aa6" kindref="member">DeviceHandle&lt;std::remove_reference_t&lt;T&gt;</ref>&gt;<sp/><ref refid="namespacemscclpp_1af6fab3d5a649a2dff1467e9eeb3a7ee3" kindref="member">deviceHandle</ref>(T&amp;&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.deviceHandle();</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="719" refid="namespacemscclpp_1a604295c701800da45821703ae4944ab3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1a604295c701800da45821703ae4944ab3" kindref="member">PacketPayload</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::Payload;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mscclpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723" refid="namespacestd" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref><sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="namespacemscclpp" kindref="compound">mscclpp</ref>::TransportFlags&gt;;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>MSCCLPP_CORE_HPP_</highlight></codeline>
    </programlisting>
    <location file="/root/mscclpp/include/mscclpp/core.hpp"/>
  </compounddef>
</doxygen>
