<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="nvls__device_8hpp" kind="file" language="C++">
    <compoundname>nvls_device.hpp</compoundname>
    <includes refid="gpu_8hpp" local="no">mscclpp/gpu.hpp</includes>
    <includes local="no">type_traits</includes>
    <includes refid="device_8hpp" local="yes">device.hpp</includes>
    <includedby refid="nvls_8hpp" local="no">nvls.hpp</includedby>
    <incdepgraph>
      <node id="7">
        <label>device.hpp</label>
        <link refid="device_8hpp"/>
      </node>
      <node id="5">
        <label>linux/version.h</label>
      </node>
      <node id="4">
        <label>cuda_runtime.h</label>
      </node>
      <node id="1">
        <label>nvls_device.hpp</label>
        <link refid="nvls__device_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mscclpp/gpu.hpp</label>
        <link refid="gpu_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cuda.h</label>
      </node>
      <node id="6">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>nvls.hpp</label>
        <link refid="nvls_8hpp"/>
      </node>
      <node id="1">
        <label>nvls_device.hpp</label>
        <link refid="nvls__device_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmscclpp_1_1DeviceMulticastPointerDeviceHandle" prot="public">mscclpp::DeviceMulticastPointerDeviceHandle</innerclass>
    <innernamespace refid="namespacemscclpp">mscclpp</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MSCCLPP_NVLS_DEVICE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSCCLPP_NVLS_DEVICE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gpu_8hpp" kindref="compound">mscclpp/gpu.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cuda_fp16.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="device_8hpp" kindref="compound">device.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemscclpp" kindref="compound">mscclpp</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="19" refid="namespacemscclpp_1a50714640772d2d58175332977806e443" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacemscclpp_1a50714640772d2d58175332977806e443" kindref="member">dependentFalse</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>workaround<sp/>before<sp/>CWG2518/P2593R1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structmscclpp_1_1DeviceMulticastPointerDeviceHandle" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmscclpp_1_1DeviceMulticastPointerDeviceHandle" kindref="compound">DeviceMulticastPointerDeviceHandle</ref><sp/>{</highlight></codeline>
<codeline lineno="23" refid="structmscclpp_1_1DeviceMulticastPointerDeviceHandle_1aee7c0c7f573830d80aa31b8f6082232a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structmscclpp_1_1DeviceMulticastPointerDeviceHandle_1aee7c0c7f573830d80aa31b8f6082232a" kindref="member">devicePtr</ref>;</highlight></codeline>
<codeline lineno="24" refid="structmscclpp_1_1DeviceMulticastPointerDeviceHandle_1a87de04bd08c3ced0419adf9c40ce9143" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structmscclpp_1_1DeviceMulticastPointerDeviceHandle_1a87de04bd08c3ced0419adf9c40ce9143" kindref="member">mcPtr</ref>;</highlight></codeline>
<codeline lineno="25" refid="structmscclpp_1_1DeviceMulticastPointerDeviceHandle_1a73cb2d15a0859d46bd4e85c8fbbe173e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structmscclpp_1_1DeviceMulticastPointerDeviceHandle_1a73cb2d15a0859d46bd4e85c8fbbe173e" kindref="member">bufferSize</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TValue,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>multimemLoadReduce(TValue&amp;<sp/>val,<sp/>T*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint4&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>float&gt;)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.ld_reduce.relaxed.sys.global.add.v4.f32<sp/>{%0,%1,%2,%3},<sp/>[%4];&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.x),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.y),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.z),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.w)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint2&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>float&gt;)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.ld_reduce.relaxed.sys.global.add.v2.f32<sp/>{%0,%1},<sp/>[%2];&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.x),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.y)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint1&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>float&gt;)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.ld_reduce.relaxed.sys.global.add.f32<sp/>{%0},<sp/>[%1];&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.x)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint4&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>__half2&gt;)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.ld_reduce.relaxed.sys.global.add.v4.f16x2<sp/>{%0,%1,%2,%3},<sp/>[%4];&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.x),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.y),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.z),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.w)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint2&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>__half2&gt;)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.ld_reduce.relaxed.sys.global.add.v2.f16x2<sp/>{%0,%1},<sp/>[%2];&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.x),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.y)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint1&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>__half2&gt;)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.ld_reduce.relaxed.sys.global.add.f16x2<sp/>{%0},<sp/>[%1];&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val.x)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(dependentFalse&lt;T&gt;,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>supported<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TValue,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>multimemStore(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TValue&amp;<sp/>val,<sp/>T*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint4&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>float&gt;)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.st.relaxed.sys.global.v4.f32<sp/>[%0],<sp/>{%1,%2,%3,%4};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.y),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.z),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.w)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint2&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>float&gt;)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.st.relaxed.sys.global.v2.f32<sp/>[%0],<sp/>{%1,%2};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.y)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint1&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>float&gt;)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.st.relaxed.sys.global.f32<sp/>[%0],<sp/>{%1};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint4&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>__half2&gt;)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.st.relaxed.sys.global.v4.f16x2<sp/>[%0],<sp/>{%1,%2,%3,%4};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.y),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.z),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.w)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint2&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>__half2&gt;)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.st.relaxed.sys.global.v2.f16x2<sp/>[%0],<sp/>{%1,%2};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.y)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint1&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>__half2&gt;)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.st.relaxed.sys.global.f16x2<sp/>[%0],<sp/>{%1};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(dependentFalse&lt;T&gt;,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>supported<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TValue,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>MSCCLPP_DEVICE_INLINE<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>multimemStoreReduce(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TValue&amp;<sp/>val,<sp/>T*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>float4&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>float&gt;)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.red.relaxed.sys.global.add.v4.f32<sp/>[%0],<sp/>{%1,%2,%3,%4};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.y),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.z),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.w)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint2&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>float&gt;)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.red.relaxed.sys.global.add.v2.f32<sp/>[%0],<sp/>{%1,%2};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.y)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint1&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>float&gt;)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.red.relaxed.sys.global.add.f32<sp/>[%0],<sp/>{%1};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint4&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>__half2&gt;)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.red.relaxed.sys.global.add.v4.f16x2<sp/>[%0],<sp/>{%1,%2,%3,%4};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x),</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.y),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.z),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.w)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint2&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>__half2&gt;)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.red.relaxed.sys.global.add.v2.f16x2<sp/>[%0],<sp/>{%1,%2};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.y)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;TValue,<sp/>uint1&gt;<sp/>&amp;&amp;<sp/>std::is_same_v&lt;T,<sp/>__half2&gt;)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;multimem.red.relaxed.sys.global.add.f16x2<sp/>[%0],<sp/>{%1};&quot;</highlight><highlight class="normal"><sp/>::</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">(ptr),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(val.x)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(dependentFalse&lt;T&gt;,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>supported<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(MSCCLPP_DEVICE_CUDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mscclpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>MSCCLPP_NVLS_DEVICE_HPP_</highlight></codeline>
    </programlisting>
    <location file="/root/mscclpp/include/mscclpp/nvls_device.hpp"/>
  </compounddef>
</doxygen>
