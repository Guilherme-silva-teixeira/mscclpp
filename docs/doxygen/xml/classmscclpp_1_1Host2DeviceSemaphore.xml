<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmscclpp_1_1Host2DeviceSemaphore" kind="class" language="C++" prot="public">
    <compoundname>mscclpp::Host2DeviceSemaphore</compoundname>
    <basecompoundref refid="classmscclpp_1_1BaseSemaphore" prot="public" virt="non-virtual">mscclpp::BaseSemaphore&lt; CudaDeleter, std::default_delete &gt;</basecompoundref>
    <includes refid="semaphore_8hpp" local="no">semaphore.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmscclpp_1_1Host2DeviceSemaphore_1af3ffce164a9024c8e7cf881dafdbb0f3" prot="public" static="no">
        <type><ref refid="structmscclpp_1_1Host2DeviceSemaphoreDeviceHandle" kindref="compound">Host2DeviceSemaphoreDeviceHandle</ref></type>
        <definition>using mscclpp::Host2DeviceSemaphore::DeviceHandle =  Host2DeviceSemaphoreDeviceHandle</definition>
        <argsstring></argsstring>
        <name>DeviceHandle</name>
        <briefdescription>
<para>Device-side handle for <ref refid="classmscclpp_1_1Host2DeviceSemaphore" kindref="compound">Host2DeviceSemaphore</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="85" column="3" bodyfile="/root/mscclpp/include/mscclpp/semaphore.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmscclpp_1_1Host2DeviceSemaphore_1a2a2587b98a88a36e467ab410f29f9a3e" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classmscclpp_1_1Connection" kindref="compound">Connection</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Connection&gt; mscclpp::Host2DeviceSemaphore::connection_</definition>
        <argsstring></argsstring>
        <name>connection_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="69" column="19" bodyfile="/root/mscclpp/include/mscclpp/semaphore.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmscclpp_1_1Host2DeviceSemaphore_1a73d129c6dae97b2a8b2cdf02edb85156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mscclpp::Host2DeviceSemaphore::Host2DeviceSemaphore</definition>
        <argsstring>(Communicator &amp;communicator, std::shared_ptr&lt; Connection &gt; connection)</argsstring>
        <name>Host2DeviceSemaphore</name>
        <param>
          <type><ref refid="classmscclpp_1_1Communicator" kindref="compound">Communicator</ref> &amp;</type>
          <declname>communicator</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classmscclpp_1_1Connection" kindref="compound">Connection</ref> &gt;</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>communicator</parametername>
</parameternamelist>
<parameterdescription>
<para>The communicator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection associated with this semaphore. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="75" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classmscclpp_1_1Host2DeviceSemaphore_1aa23450892f42bddfd40676d211c0385f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classmscclpp_1_1Connection" kindref="compound">Connection</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Connection&gt; mscclpp::Host2DeviceSemaphore::connection</definition>
        <argsstring>()</argsstring>
        <name>connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the connection. <simplesect kind="return"><para>The connection associated with this semaphore. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="79" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmscclpp_1_1Host2DeviceSemaphore_1aadcbfaeab2c331f0df600ec3dbdb6134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mscclpp::Host2DeviceSemaphore::signal</definition>
        <argsstring>()</argsstring>
        <name>signal</name>
        <briefdescription>
<para>Signal the device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="82" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classmscclpp_1_1Host2DeviceSemaphore_1a6f984a90dd6765dc9e6fe6df3af19e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmscclpp_1_1Host2DeviceSemaphore_1af3ffce164a9024c8e7cf881dafdbb0f3" kindref="member">DeviceHandle</ref></type>
        <definition>DeviceHandle mscclpp::Host2DeviceSemaphore::deviceHandle</definition>
        <argsstring>()</argsstring>
        <name>deviceHandle</name>
        <briefdescription>
<para>Returns the device-side handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="88" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A semaphore for sending signals from the host to the device. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>mscclpp::BaseSemaphore&lt; CudaDeleter, std::default_delete &gt;</label>
        <link refid="classmscclpp_1_1BaseSemaphore"/>
      </node>
      <node id="1">
        <label>mscclpp::Host2DeviceSemaphore</label>
        <link refid="classmscclpp_1_1Host2DeviceSemaphore"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>mscclpp::NonblockingFuture&lt; mscclpp::RegisteredMemory &gt;</label>
        <link refid="classmscclpp_1_1NonblockingFuture"/>
      </node>
      <node id="2">
        <label>mscclpp::BaseSemaphore&lt; CudaDeleter, std::default_delete &gt;</label>
        <link refid="classmscclpp_1_1BaseSemaphore"/>
        <childnode refid="3" relation="usage">
          <edgelabel>remoteInboundSemaphoreIdsRegMem_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>mscclpp::Host2DeviceSemaphore</label>
        <link refid="classmscclpp_1_1Host2DeviceSemaphore"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/root/mscclpp/include/mscclpp/semaphore.hpp" line="67" column="50" bodyfile="/root/mscclpp/include/mscclpp/semaphore.hpp" bodystart="67" bodyend="89"/>
    <listofallmembers>
      <member refid="classmscclpp_1_1BaseSemaphore_1a1f438a138ad58311a3a97966f647b5c2" prot="public" virt="non-virtual"><scope>mscclpp::Host2DeviceSemaphore</scope><name>BaseSemaphore</name></member>
      <member refid="classmscclpp_1_1Host2DeviceSemaphore_1aa23450892f42bddfd40676d211c0385f" prot="public" virt="non-virtual"><scope>mscclpp::Host2DeviceSemaphore</scope><name>connection</name></member>
      <member refid="classmscclpp_1_1Host2DeviceSemaphore_1a2a2587b98a88a36e467ab410f29f9a3e" prot="private" virt="non-virtual"><scope>mscclpp::Host2DeviceSemaphore</scope><name>connection_</name></member>
      <member refid="classmscclpp_1_1Host2DeviceSemaphore_1af3ffce164a9024c8e7cf881dafdbb0f3" prot="public" virt="non-virtual"><scope>mscclpp::Host2DeviceSemaphore</scope><name>DeviceHandle</name></member>
      <member refid="classmscclpp_1_1Host2DeviceSemaphore_1a6f984a90dd6765dc9e6fe6df3af19e49" prot="public" virt="non-virtual"><scope>mscclpp::Host2DeviceSemaphore</scope><name>deviceHandle</name></member>
      <member refid="classmscclpp_1_1BaseSemaphore_1a13cc1511293d69d57f2bae285844129c" prot="protected" virt="non-virtual"><scope>mscclpp::Host2DeviceSemaphore</scope><name>expectedInboundSemaphore_</name></member>
      <member refid="classmscclpp_1_1Host2DeviceSemaphore_1a73d129c6dae97b2a8b2cdf02edb85156" prot="public" virt="non-virtual"><scope>mscclpp::Host2DeviceSemaphore</scope><name>Host2DeviceSemaphore</name></member>
      <member refid="classmscclpp_1_1BaseSemaphore_1aa3f8d454e6f289f7fc004107b3698b90" prot="protected" virt="non-virtual"><scope>mscclpp::Host2DeviceSemaphore</scope><name>localInboundSemaphore_</name></member>
      <member refid="classmscclpp_1_1BaseSemaphore_1aec4ea46dd287fbc9c619dcc9a2df2886" prot="protected" virt="non-virtual"><scope>mscclpp::Host2DeviceSemaphore</scope><name>outboundSemaphore_</name></member>
      <member refid="classmscclpp_1_1BaseSemaphore_1a5f3a599ecb971f2613df2b0cb9467a55" prot="protected" virt="non-virtual"><scope>mscclpp::Host2DeviceSemaphore</scope><name>remoteInboundSemaphoreIdsRegMem_</name></member>
      <member refid="classmscclpp_1_1Host2DeviceSemaphore_1aadcbfaeab2c331f0df600ec3dbdb6134" prot="public" virt="non-virtual"><scope>mscclpp::Host2DeviceSemaphore</scope><name>signal</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
